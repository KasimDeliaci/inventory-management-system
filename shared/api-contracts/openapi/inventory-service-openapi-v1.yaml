openapi: 3.0.0
info:
  title: Inventory Service API
  version: 0.8.0
  description: >-
    CRUD for master data (Products, Suppliers, Customers) with comprehensive filtering support.
    Integer IDs, no auth. Timestamps are read-only and maintained in app code (e.g., JPA auditing).
    
    ## Filtering Rules
    - **AND logic** across different parameter types (narrows results)
    - **OR logic** within repeatable parameters (broadens within that field)
    - **Case-insensitive** text matching for better UX
    - **Unknown parameters** return HTTP 400 to catch typos early
    - **Range parameters** are inclusive (gte = greater than or equal, lte = less than or equal)
    - **Date-time parameters** must be in UTC (ending with Z or +00:00)
    
    ## Performance Notes
    - Text search (`q` parameter) performs substring matching and may be slow on large datasets
    - Maximum pagination window is 10,000 records (page * size cannot exceed 10,000)
    - Most filters are index-backed; `q` may be slower on very large datasets
    
servers:
  - url: http://localhost:8000
    description: Local dev
  - url: http://inventory:8000
    description: In-cluster name

components:
  parameters:
    # ---- Pagination Parameters ----
    PageParam: 
      in: query
      name: page
      description: "0-based page number"
      schema: {type: integer, minimum: 0, default: 0}
    
    SizeParam: 
      in: query
      name: size
      description: "Page size (max 200)"
      schema: {type: integer, minimum: 1, maximum: 200, default: 20}
    
    SortParam: 
      in: query
      name: sort
      description: "Sort clause with format: field,direction (asc|desc). Invalid fields return 400."
      schema: {type: string, pattern: '^[A-Za-z]+,([Aa][Ss][Cc]|[Dd][Ee][Ss][Cc])$', example: "productName,asc"}
    
    # ---- Common Filter Parameters ----
    QueryParam:
      in: query
      name: q
      description: >-
        Text search query. Searches across name and description/email fields.
        Minimum 2 characters required. Case-insensitive substring match.
        Note: This performs a substring search and may be slow on very large datasets.
      schema: {type: string, minLength: 2, example: "banana"}
    
    UpdatedAfterParam:
      in: query
      name: updated_after
      description: >-
        Filter records updated after this timestamp (inclusive).
        Must be in UTC format with Z suffix or +00:00 offset.
      schema: {type: string, format: date-time, example: "2025-08-01T00:00:00Z"}
    
    # ---- Product-specific Filter Parameters ----
    CategoryParam:
      in: query
      name: category
      description: >-
        Filter by product category. Case-insensitive exact match.
        Can be repeated for OR logic (e.g., category=Snacks&category=Drinks).
      schema: {type: array, items: {type: string, maxLength: 100}, minItems: 1}
      style: form
      explode: true
      example: ["Electronics", "Accessories"]
    
    UomParam:
      in: query
      name: uom
      description: >-
        Filter by unit of measure. Case-insensitive exact match.
        Can be repeated for OR logic. Allowed values (validated server-side & DB): adet, ton, kg, g, lt, ml, koli, paket, çuval, şişe.
      schema: {type: array, items: {type: string}, minItems: 1}
      style: form
      explode: true
      example: ["kg", "g"]
    
    PriceGteParam:
      in: query
      name: price_gte
      description: "Minimum price (inclusive). Must be >= 0 and <= 99999999.99"
      schema: {type: number, format: double, minimum: 0, maximum: 99999999.99, example: 10.00}
    
    PriceLteParam:
      in: query
      name: price_lte
      description: "Maximum price (inclusive). Must be >= price_gte if both provided"
      schema: {type: number, format: double, minimum: 0, maximum: 99999999.99, example: 50.00}
    
    SafetyGteParam:
      in: query
      name: safety_gte
      description: "Minimum safety stock level (inclusive)"
      schema: {type: number, format: double, minimum: 0, maximum: 99999999.99, example: 0}
    
    SafetyLteParam:
      in: query
      name: safety_lte
      description: "Maximum safety stock level (inclusive)"
      schema: {type: number, format: double, minimum: 0, maximum: 99999999.99, example: 5}
    
    ReorderGteParam:
      in: query
      name: reorder_gte
      description: "Minimum reorder point (inclusive)"
      schema: {type: number, format: double, minimum: 0, maximum: 99999999.99, example: 10}
    
    ReorderLteParam:
      in: query
      name: reorder_lte
      description: "Maximum reorder point (inclusive)"
      schema: {type: number, format: double, minimum: 0, maximum: 99999999.99, example: 25}
    
    # ---- Supplier/Customer Filter Parameters ----
    CityParam:
      in: query
      name: city
      description: >-
        Filter by city. Case-insensitive exact match.
        Can be repeated for OR logic (e.g., city=Istanbul&city=Ankara).
      schema: {type: array, items: {type: string, maxLength: 50}, minItems: 1}
      style: form
      explode: true
      example: ["Istanbul", "Ankara"]
    
    # ---- Customer-specific Filter Parameters ----
    SegmentParam:
      in: query
      name: segment
      description: >-
        Filter by customer segment. Exact match against enum values.
        Can be repeated for OR logic.
      schema: {type: array, items: {type: string, enum: [INDIVIDUAL, SME, CORPORATE, ENTERPRISE, OTHER]}, minItems: 1}
      style: form
      explode: true
      example: ["SME", "CORPORATE"]

    # ---- Product-Suppliers Filter Parameters ----
    ProductSupplierProductIdParam:
      in: query
      name: product_id
      description: >-
        Filter by product IDs. Repeatable for OR logic within the same parameter.
        Only allowed on top-level /product-suppliers (not on nested by product).
      schema:
        type: array
        items: {type: integer, format: int64}
        minItems: 1
      style: form
      explode: true
      example: [101, 102]

    ProductSupplierSupplierIdParam:
      in: query
      name: supplier_id
      description: >-
        Filter by supplier IDs. Repeatable for OR logic within the same parameter.
        Only allowed on top-level /product-suppliers (not on nested by supplier).
      schema:
        type: array
        items: {type: integer, format: int64}
        minItems: 1
      style: form
      explode: true
      example: [11, 12]

    ProductSupplierActiveParam:
      in: query
      name: active
      description: >-
        Filter by active status. If omitted, returns both active and inactive records.
      schema: {type: boolean}

    ProductSupplierPreferredParam:
      in: query
      name: preferred
      description: >-
        Filter by preferred status. Maps to isPreferred on the link resource.
        Note: At most one preferred per product (regardless of active) enforced by DB.
      schema: {type: boolean}

    ProductSupplierLastDeliverySinceParam:
      in: query
      name: last_delivery_since
      description: >-
        Filter by last delivery date (inclusive). Format: YYYY-MM-DD.
      schema: {type: string, format: date, example: "2025-08-01"}

    # ---- Campaigns Filter Parameters ----
    CampaignTypeParam:
      in: query
      name: type
      description: >-
        Filter by campaign type. Repeatable for OR logic.
      schema:
        type: array
        items: {type: string, enum: [DISCOUNT, BXGY_SAME_PRODUCT]}
        minItems: 1
      style: form
      explode: true
      example: [DISCOUNT]

    CampaignStartGteParam:
      in: query
      name: start_gte
      description: "Start date greater than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    CampaignStartLteParam:
      in: query
      name: start_lte
      description: "Start date less than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    CampaignEndGteParam:
      in: query
      name: end_gte
      description: "End date greater than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    CampaignEndLteParam:
      in: query
      name: end_lte
      description: "End date less than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    CampaignActiveOnParam:
      in: query
      name: active_on
      description: >-
        Return campaigns active on this date (inclusive window check). Format: YYYY-MM-DD.
      schema: {type: string, format: date}

    # ---- Customer Special Offers Filter Parameters ----
    CSOCustomerIdParam:
      in: query
      name: customer_id
      description: >-
        Filter by customer IDs. Repeatable for OR logic within the same parameter.
      schema:
        type: array
        items: {type: integer, format: int64}
        minItems: 1
      style: form
      explode: true
      example: [501, 502]

    CSOPercentGteParam:
      in: query
      name: percent_gte
      description: "Minimum percentOff (inclusive). 0-100"
      schema: {type: number, format: double, minimum: 0, maximum: 100}

    CSOPercentLteParam:
      in: query
      name: percent_lte
      description: "Maximum percentOff (inclusive). 0-100"
      schema: {type: number, format: double, minimum: 0, maximum: 100}

    CSOStartGteParam:
      in: query
      name: start_gte
      description: "Start date greater than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    CSOStartLteParam:
      in: query
      name: start_lte
      description: "Start date less than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    CSOEndGteParam:
      in: query
      name: end_gte
      description: "End date greater than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    CSOEndLteParam:
      in: query
      name: end_lte
      description: "End date less than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    CSOActiveOnParam:
      in: query
      name: active_on
      description: >-
        Return offers active on this date (inclusive window check). Format: YYYY-MM-DD.
      schema: {type: string, format: date}

    # ---- Purchase Orders Filter Parameters ----
    PurchaseOrderSupplierIdParam:
      in: query
      name: supplier_id
      description: >-
        Filter by supplier IDs. Repeatable for OR logic.
      schema:
        type: array
        items: {type: integer, format: int64}
        minItems: 1
      style: form
      explode: true
      example: [11, 12]

    PurchaseOrderStatusParam:
      in: query
      name: status
      description: >-
        Filter by purchase order status. Repeatable for OR logic.
      schema:
        type: array
        items: {type: string, enum: [PLACED, IN_TRANSIT, RECEIVED, CANCELLED]}
        minItems: 1
      style: form
      explode: true
      example: [IN_TRANSIT, PLACED]

    PurchaseOrderOrderDateGteParam:
      in: query
      name: order_date_gte
      description: "Order date greater than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    PurchaseOrderOrderDateLteParam:
      in: query
      name: order_date_lte
      description: "Order date less than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    PurchaseOrderEtaGteParam:
      in: query
      name: expected_delivery_gte
      description: "Expected delivery date greater than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    PurchaseOrderEtaLteParam:
      in: query
      name: expected_delivery_lte
      description: "Expected delivery date less than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    PurchaseOrderReceivedSinceParam:
      in: query
      name: received_since
      description: >-
        Filter by actualDelivery timestamp >= this value (inclusive). Must be UTC with Z or +00:00.
      schema: {type: string, format: date-time}

  examples:
    PaginationWindowExceeded:
      summary: "Pagination window exceeded"
      value:
        status: 400
        error: "Bad Request"
        message: "page * size cannot exceed 10,000"
        path: "/api/v1/resource"
        timestamp: "2025-08-28T10:00:00Z"
  schemas:
    # -----------------------------
    # ENUMS (from V1__types.sql)
    # -----------------------------
    CustomerSegment: 
      type: string
      description: "Business segment classification for customer categorization and pricing strategies"
      enum: [INDIVIDUAL, SME, CORPORATE, ENTERPRISE, OTHER]
      example: SME

    # -----------------------------
    # Shared pagination & errors
    # -----------------------------
    PageMeta:
      type: object
      properties:
        page: {type: integer, description: "Current page number (0-based)"}
        size: {type: integer, description: "Number of elements per page"}
        totalElements: {type: integer, description: "Total number of elements across all pages"}
        totalPages: {type: integer, description: "Total number of pages available"}
    
    ErrorResponse:
      type: object
      properties:
        status: 
          type: integer
          example: 400
        error: 
          type: string
          example: "Bad Request"
        message: 
          type: string
          example: "Validation failed: reorderPoint must be greater than or equal to safetyStock."
        path: 
          type: string
          example: "/api/v1/products"
        timestamp: 
          type: string
          format: date-time
        details:
          type: object
          description: "Additional error details for filter validation"
          properties:
            invalidParams:
              type: array
              items:
                type: string
              example: ["categor_y", "pricee"]
            validationErrors:
              type: object
              additionalProperties:
                type: string
              example:
                price_gte: "Must be greater than or equal to 0"
                q: "Minimum length is 2 characters"

    # -----------------------------
    # Product
    # -----------------------------
    Product:
      type: object
      required: [productId, productName, category, unitOfMeasure, safetyStock, reorderPoint, currentPrice]
      properties:
        productId: {type: integer, format: int64, example: 101, description: "Unique identifier for the product"}
        productName: {type: string, maxLength: 200, example: "iPhone 15 Pro", description: "Name of the product (max 200 characters)"}
        description: {type: string, nullable: true, example: "Latest model with advanced camera system", description: "Optional detailed description of the product"}
        category: {type: string, maxLength: 100, example: "Electronics", description: "Product category for organization and filtering (max 100 characters)"}
        unitOfMeasure: {type: string, maxLength: 20, minLength: 1, example: "adet", description: "Unit of measurement. Allowed: adet, ton, kg, g, lt, ml, koli, paket, çuval, şişe"}
        safetyStock: {type: number, format: double, minimum: 0, example: 10, description: "Minimum stock level that triggers reordering alerts"}
        reorderPoint: {type: number, format: double, minimum: 0, example: 25, description: "Stock level threshold for automatic reordering (must be >= safetyStock)"}
        currentPrice: {type: number, format: double, minimum: 0, example: 1299.99, description: "Current selling price of the product"}
        createdAt: {type: string, format: date-time, readOnly: true, description: "Timestamp when the product was created"}
        updatedAt: {type: string, format: date-time, readOnly: true, description: "Timestamp when the product was last updated"}
    
    ProductCreate:
      type: object
      required: [productName, category, unitOfMeasure, safetyStock, reorderPoint, currentPrice]
      properties:
        productName: {type: string, minLength: 1, maxLength: 200, description: "Name of the product (1-200 characters)"}
        description: {type: string, nullable: true, description: "Optional detailed description of the product"}
        category: {type: string, minLength: 1, maxLength: 100, description: "Product category for organization (1-100 characters)"}
        unitOfMeasure: {type: string, minLength: 1, maxLength: 20, example: "adet", description: "Unit of measurement. Allowed: adet, ton, kg, g, lt, ml, koli, paket, çuval, şişe"}
        safetyStock: {type: number, format: double, minimum: 0, maximum: 99999999.99, description: "Minimum stock level that triggers reordering alerts"}
        reorderPoint: {type: number, format: double, minimum: 0, maximum: 99999999.99, description: "Stock level threshold for automatic reordering (must be >= safetyStock)"}
        currentPrice: {type: number, format: double, minimum: 0, maximum: 99999999.99, description: "Current selling price of the product"}
    
    ProductUpdate:
      allOf:
        - $ref: '#/components/schemas/ProductCreate'

    PageProduct:
      type: object
      properties:
        content:
          type: array
          items: 
            $ref: '#/components/schemas/Product'
        page: 
          $ref: '#/components/schemas/PageMeta'

    # -----------------------------
    # Supplier
    # -----------------------------
    Supplier:
      type: object
      required: [supplierId, supplierName, email, phone, city]
      properties:
        supplierId: {type: integer, format: int64, example: 11, description: "Unique identifier for the supplier"}
        supplierName: {type: string, maxLength: 200, example: "Acme Foods Ltd", description: "Name of the supplier company (max 200 characters)"}
        email: {type: string, format: email, maxLength: 100, example: "contact@acmefoods.com", description: "Unique email address for the supplier (max 100 characters)"}
        phone: {type: string, maxLength: 30, pattern: "^[+]?[0-9\\s\\-\\(\\)]+$", example: "+90 212 555 0123", description: "Contact phone number (max 30 characters)"}
        city: {type: string, maxLength: 50, example: "Istanbul", description: "City where the supplier is located (max 50 characters)"}
        createdAt: {type: string, format: date-time, readOnly: true, description: "Timestamp when the supplier was created"}
        updatedAt: {type: string, format: date-time, readOnly: true, description: "Timestamp when the supplier was last updated"}
    
    SupplierCreate:
      type: object
      required: [supplierName, email, phone, city]
      properties:
        supplierName: {type: string, minLength: 1, maxLength: 200, description: "Name of the supplier company (1-200 characters)"}
        email: {type: string, format: email, maxLength: 100, description: "Unique email address for the supplier (max 100 characters)"}
        phone: {type: string, maxLength: 30, pattern: "^[+]?[0-9\\s\\-\\(\\)]+$", description: "Contact phone number (max 30 characters)"}
        city: {type: string, minLength: 1, maxLength: 50, description: "City where the supplier is located (1-50 characters)"}
    
    SupplierUpdate:
      allOf:
        - $ref: '#/components/schemas/SupplierCreate'

    PageSupplier:
      type: object
      properties:
        content:
          type: array
          items: 
            $ref: '#/components/schemas/Supplier'
        page: 
          $ref: '#/components/schemas/PageMeta'

    # -----------------------------
    # Customer
    # -----------------------------
    Customer:
      type: object
      required: [customerId, customerName, customerSegment, email, phone, city]
      properties:
        customerId: {type: integer, format: int64, example: 501, description: "Unique identifier for the customer"}
        customerName: {type: string, maxLength: 200, example: "Blue Mart Electronics", description: "Name of the customer or company (max 200 characters)"}
        customerSegment: {$ref: '#/components/schemas/CustomerSegment', description: "Business segment classification of the customer"}
        email: {type: string, format: email, maxLength: 100, example: "orders@bluemart.com", description: "Unique email address for the customer (max 100 characters)"}
        phone: {type: string, maxLength: 30, pattern: "^[+]?[0-9\\s\\-\\(\\)]+$", example: "+90 532 123 4567", description: "Contact phone number (max 30 characters)"}
        city: {type: string, maxLength: 50, example: "Ankara", description: "City where the customer is located (max 50 characters)"}
        createdAt: {type: string, format: date-time, readOnly: true, description: "Timestamp when the customer was created"}
        updatedAt: {type: string, format: date-time, readOnly: true, description: "Timestamp when the customer was last updated"}
    
    CustomerCreate:
      type: object
      required: [customerName, customerSegment, email, phone, city]
      properties:
        customerName: {type: string, minLength: 1, maxLength: 200, description: "Name of the customer or company (1-200 characters)"}
        customerSegment: {$ref: '#/components/schemas/CustomerSegment', description: "Business segment classification of the customer"}
        email: {type: string, format: email, maxLength: 100, description: "Unique email address for the customer (max 100 characters)"}
        phone: {type: string, maxLength: 30, pattern: "^[+]?[0-9\\s\\-\\(\\)]+$", description: "Contact phone number (max 30 characters)"}
        city: {type: string, minLength: 1, maxLength: 50, description: "City where the customer is located (1-50 characters)"}
        
    CustomerUpdate:
      allOf:
        - $ref: '#/components/schemas/CustomerCreate'

    PageCustomer:
      type: object
      properties:
        content:
          type: array
          items: 
            $ref: '#/components/schemas/Customer'
        page: 
          $ref: '#/components/schemas/PageMeta'

    # -----------------------------
    # Product-Suppliers
    # -----------------------------
    ProductSupplierLink:
      type: object
      description: Canonical product–supplier link with operational flags and simple KPIs.
      properties:
        productSupplierId: {type: integer, format: int64}
        productId: {type: integer, format: int64}
        supplierId: {type: integer, format: int64}
        minOrderQuantity: {type: number, format: double, description: "Minimum order quantity for this link (3 decimals)"}
        isPreferred: {type: boolean}
        active: {type: boolean}
        avgLeadTimeDays: {type: number, format: double, nullable: true, readOnly: true}
        avgDelayDays: {type: number, format: double, nullable: true, readOnly: true}
        totalOrdersCount: {type: integer, readOnly: true}
        delayedOrdersCount: {type: integer, readOnly: true}
        lastDeliveryDate: {type: string, format: date, nullable: true}
        createdAt: {type: string, format: date-time, readOnly: true}
        updatedAt: {type: string, format: date-time, readOnly: true}

    ProductSupplierCreate:
      type: object
      required: [productId, supplierId, minOrderQuantity]
      properties:
        productId: {type: integer, format: int64}
        supplierId: {type: integer, format: int64}
        minOrderQuantity: {type: number, format: double, minimum: 0.001, description: "Must be > 0"}
        isPreferred: {type: boolean, default: false}
        active: {type: boolean, default: true}

    ProductSupplierUpdate:
      type: object
      properties:
        minOrderQuantity: {type: number, format: double, minimum: 0.001}
        isPreferred: {type: boolean}
        active: {type: boolean}

    SupplierSummary:
      type: object
      properties:
        supplierId: {type: integer, format: int64}
        supplierName: {type: string}
        city: {type: string}

    ProductSummary:
      type: object
      properties:
        productId: {type: integer, format: int64}
        productName: {type: string}
        category: {type: string}

    ProductSupplierWithSupplier:
      type: object
      properties:
        supplier:
          $ref: '#/components/schemas/SupplierSummary'
        link:
          $ref: '#/components/schemas/ProductSupplierLink'

    ProductSupplierWithProduct:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/ProductSummary'
        link:
          $ref: '#/components/schemas/ProductSupplierLink'

    PageProductSupplierLink:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProductSupplierLink'
        page:
          $ref: '#/components/schemas/PageMeta'

    PageProductSupplierWithSupplier:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProductSupplierWithSupplier'
        page:
          $ref: '#/components/schemas/PageMeta'

    PageProductSupplierWithProduct:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProductSupplierWithProduct'
        page:
          $ref: '#/components/schemas/PageMeta'

    # -----------------------------
    # Campaigns & Customer Special Offers
    # -----------------------------
    CampaignType:
      type: string
      enum: [DISCOUNT, BXGY_SAME_PRODUCT]

    Campaign:
      type: object
      required: [campaignId, campaignName, campaignType, startDate, endDate]
      properties:
        campaignId: {type: integer, format: int64}
        campaignName: {type: string}
        campaignType: {$ref: '#/components/schemas/CampaignType'}
        discountPercentage: {type: number, format: double, minimum: 0, maximum: 100, nullable: true}
        minQty: {type: integer, minimum: 1, nullable: true}
        buyQty: {type: integer, minimum: 1, nullable: true}
        getQty: {type: integer, minimum: 1, nullable: true}
        startDate: {type: string, format: date}
        endDate: {type: string, format: date}
        createdAt: {type: string, format: date-time, readOnly: true}
        updatedAt: {type: string, format: date-time, readOnly: true}

    CampaignCreateDiscount:
      type: object
      required: [campaignName, campaignType, startDate, endDate, discountPercentage]
      properties:
        campaignName: {type: string}
        campaignType:
          $ref: '#/components/schemas/CampaignType'
        discountPercentage: {type: number, format: double, minimum: 0, maximum: 100}
        minQty: {type: integer, minimum: 1, nullable: true}
        startDate: {type: string, format: date}
        endDate: {type: string, format: date}

    CampaignCreateBxgy:
      type: object
      required: [campaignName, campaignType, startDate, endDate, buyQty, getQty]
      properties:
        campaignName: {type: string}
        campaignType:
          $ref: '#/components/schemas/CampaignType'
        buyQty: {type: integer, minimum: 1}
        getQty: {type: integer, minimum: 1}
        minQty: {type: integer, minimum: 1, nullable: true}
        startDate: {type: string, format: date}
        endDate: {type: string, format: date}

    CampaignCreate:
      oneOf:
        - $ref: '#/components/schemas/CampaignCreateDiscount'
        - $ref: '#/components/schemas/CampaignCreateBxgy'

    CampaignUpdate:
      allOf:
        - $ref: '#/components/schemas/CampaignCreate'

    PageCampaign:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Campaign'
        page:
          $ref: '#/components/schemas/PageMeta'

    CampaignAssignProductsRequest:
      type: object
      required: [productIds]
      properties:
        productIds:
          type: array
          items: {type: integer, format: int64}
          minItems: 1

    PageProductSummary:
      type: object
      properties:
        content:
          type: array
          items: {$ref: '#/components/schemas/ProductSummary'}
        page:
          $ref: '#/components/schemas/PageMeta'

    CustomerSpecialOffer:
      type: object
      required: [specialOfferId, customerId, percentOff, startDate, endDate]
      properties:
        specialOfferId: {type: integer, format: int64}
        customerId: {type: integer, format: int64}
        percentOff: {type: number, format: double, minimum: 0, maximum: 100}
        startDate: {type: string, format: date}
        endDate: {type: string, format: date}
        createdAt: {type: string, format: date-time, readOnly: true}
        updatedAt: {type: string, format: date-time, readOnly: true}

    CustomerSpecialOfferCreate:
      type: object
      required: [customerId, percentOff, startDate, endDate]
      properties:
        customerId: {type: integer, format: int64}
        percentOff: {type: number, format: double, minimum: 0, maximum: 100}
        startDate: {type: string, format: date}
        endDate: {type: string, format: date}

    CustomerSpecialOfferUpdate:
      allOf:
        - $ref: '#/components/schemas/CustomerSpecialOfferCreate'

    PageCustomerSpecialOffer:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CustomerSpecialOffer'
        page:
          $ref: '#/components/schemas/PageMeta'

    # -----------------------------
    # Purchase Orders & Items
    # -----------------------------
    PurchaseOrderStatus:
      type: string
      enum: [PLACED, IN_TRANSIT, RECEIVED, CANCELLED]

    PurchaseOrder:
      type: object
      required: [purchaseOrderId, supplierId, orderDate, status]
      properties:
        purchaseOrderId: {type: integer, format: int64}
        supplierId: {type: integer, format: int64}
        orderDate: {type: string, format: date}
        expectedDelivery: {type: string, format: date, nullable: true}
        actualDelivery: {type: string, format: date-time, nullable: true, readOnly: true}
        status: {$ref: '#/components/schemas/PurchaseOrderStatus'}
        createdAt: {type: string, format: date-time, readOnly: true}
        updatedAt: {type: string, format: date-time, readOnly: true}

    PurchaseOrderCreate:
      type: object
      required: [supplierId]
      properties:
        supplierId: {type: integer, format: int64}
        orderDate: {type: string, format: date, nullable: true}
        expectedDelivery: {type: string, format: date, nullable: true}

    PurchaseOrderUpdate:
      type: object
      properties:
        expectedDelivery: {type: string, format: date, nullable: true}
        status: {$ref: '#/components/schemas/PurchaseOrderStatus'}

    PagePurchaseOrder:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrder'
        page:
          $ref: '#/components/schemas/PageMeta'

    PurchaseOrderItem:
      type: object
      required: [purchaseOrderItemId, purchaseOrderId, productId, quantityOrdered, quantityReceived, unitPrice]
      properties:
        purchaseOrderItemId: {type: integer, format: int64}
        purchaseOrderId: {type: integer, format: int64}
        productId: {type: integer, format: int64}
        quantityOrdered: {type: number, format: double}
        quantityReceived: {type: number, format: double}
        unitPrice: {type: number, format: double}
        lineTotal: {type: number, format: double, readOnly: true}
        lineTotalReceived: {type: number, format: double, readOnly: true}
        createdAt: {type: string, format: date-time, readOnly: true}

    PurchaseOrderItemCreate:
      type: object
      required: [productId, quantityOrdered, unitPrice]
      properties:
        productId: {type: integer, format: int64}
        quantityOrdered: {type: number, format: double, minimum: 0.001}
        unitPrice: {type: number, format: double, minimum: 0}

    PurchaseOrderItemUpdate:
      type: object
      properties:
        quantityReceived: {type: number, format: double, minimum: 0}
        unitPrice: {type: number, format: double, minimum: 0}

    PagePurchaseOrderItem:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderItem'
        page:
          $ref: '#/components/schemas/PageMeta'

paths:
  # -----------------
  # Product-Suppliers
  # -----------------
  /api/v1/product-suppliers:
    get:
      tags: [ProductSuppliers]
      summary: Retrieve paginated product-supplier links with filtering and sorting
      description: >-
        Returns a paginated list of product-supplier links. Supports multiple filter parameters
        that combine with AND logic. Repeatable parameters (product_id, supplier_id) use OR logic
        within the same parameter. Unknown query parameters will result in HTTP 400.
        Default sort is by updatedAt descending. If 'active' is omitted, both active and inactive records are returned.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/ProductSupplierProductIdParam'
        - $ref: '#/components/parameters/ProductSupplierSupplierIdParam'
        - $ref: '#/components/parameters/ProductSupplierActiveParam'
        - $ref: '#/components/parameters/ProductSupplierPreferredParam'
        - $ref: '#/components/parameters/ProductSupplierLastDeliverySinceParam'
        - $ref: '#/components/parameters/UpdatedAfterParam'
      responses:
        '200':
          description: Paged links matching filter criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageProductSupplierLink'
        '400':
          description: Invalid or unknown filter parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                paginationWindowExceeded:
                  $ref: '#/components/examples/PaginationWindowExceeded'
    post:
      tags: [ProductSuppliers]
      summary: Create a product-supplier link
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductSupplierCreate'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URL of the created link
              schema:
                type: string
                format: uri
                example: "/api/v1/product-suppliers/123"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSupplierLink'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict (duplicate pair or preferred constraint violation)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/product-suppliers/{productSupplierId}:
    get:
      tags: [ProductSuppliers]
      summary: Retrieve a specific product-supplier link
      parameters:
        - in: path
          name: productSupplierId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSupplierLink'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [ProductSuppliers]
      summary: Update fields of a product-supplier link
      parameters:
        - in: path
          name: productSupplierId
          required: true
          schema: {type: integer, format: int64}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductSupplierUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSupplierLink'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Preferred constraint violation (PREFERRED_CONFLICT)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [ProductSuppliers]
      summary: Permanently remove a product-supplier link
      parameters:
        - in: path
          name: productSupplierId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '204': {description: Deleted}
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/products/{productId}/suppliers:
    get:
      tags: [ProductSuppliers]
      summary: List suppliers for a product with link details (read-only projection)
      description: >-
        Returns suppliers for the specified product together with link details. Do not pass product_id
        in query (conflicts with path). Unknown parameters result in 400. Default sort is updatedAt,desc.
        Sorting whitelist for this view: supplierName, city, isPreferred, active, lastDeliveryDate, updatedAt.
        If the productId does not exist, returns 404.
      parameters:
        - in: path
          name: productId
          required: true
          schema: {type: integer, format: int64}
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/ProductSupplierActiveParam'
        - $ref: '#/components/parameters/ProductSupplierPreferredParam'
        - $ref: '#/components/parameters/ProductSupplierLastDeliverySinceParam'
        - $ref: '#/components/parameters/UpdatedAfterParam'
      responses:
        '200':
          description: Paged suppliers for the product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageProductSupplierWithSupplier'
        '400':
          description: Invalid or unknown parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                paginationWindowExceeded:
                  $ref: '#/components/examples/PaginationWindowExceeded'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/suppliers/{supplierId}/products:
    get:
      tags: [ProductSuppliers]
      summary: List products for a supplier with link details (read-only projection)
      description: >-
        Returns products for the specified supplier together with link details. Do not pass supplier_id
        in query (conflicts with path). Unknown parameters result in 400. Default sort is updatedAt,desc.
        Sorting whitelist for this view: productName, category, isPreferred, active, lastDeliveryDate, updatedAt.
        If the supplierId does not exist, returns 404.
      parameters:
        - in: path
          name: supplierId
          required: true
          schema: {type: integer, format: int64}
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/ProductSupplierActiveParam'
        - $ref: '#/components/parameters/ProductSupplierPreferredParam'
        - $ref: '#/components/parameters/ProductSupplierLastDeliverySinceParam'
        - $ref: '#/components/parameters/UpdatedAfterParam'
      responses:
        '200':
          description: Paged products for the supplier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageProductSupplierWithProduct'
        '400':
          description: Invalid or unknown parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                paginationWindowExceeded:
                  $ref: '#/components/examples/PaginationWindowExceeded'
        '404':
          description: Supplier not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  # -----------------
  # Products
  # -----------------
  /api/v1/products:
    get:
      tags: [Products]
      summary: Retrieve paginated list of products with filtering and sorting
      description: >-
        Returns a paginated list of products. Supports multiple filter parameters that combine with AND logic.
        Repeatable parameters (category, uom) use OR logic within the same parameter type.
        Unknown query parameters will result in HTTP 400.
        Default sort is by productName ascending. Whitelisted sort fields: productName, category, currentPrice, updatedAt.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/QueryParam'
        - $ref: '#/components/parameters/CategoryParam'
        - $ref: '#/components/parameters/UomParam'
        - $ref: '#/components/parameters/PriceGteParam'
        - $ref: '#/components/parameters/PriceLteParam'
        - $ref: '#/components/parameters/SafetyGteParam'
        - $ref: '#/components/parameters/SafetyLteParam'
        - $ref: '#/components/parameters/ReorderGteParam'
        - $ref: '#/components/parameters/ReorderLteParam'
        - $ref: '#/components/parameters/UpdatedAfterParam'
      responses:
        '200':
          description: Paged products matching filter criteria
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/PageProduct'
              examples:
                filtered:
                  summary: "Filtered products example"
                  value:
                    content:
                      - productId: 101
                        productName: "Bananas"
                        category: "Fruits"
                        unitOfMeasure: "kg"
                        safetyStock: 50
                        reorderPoint: 100
                        currentPrice: 2.99
                        createdAt: "2025-01-15T10:00:00Z"
                        updatedAt: "2025-08-20T14:30:00Z"
                    page:
                      page: 0
                      size: 20
                      totalElements: 1
                      totalPages: 1
        '400':
          description: Invalid filter parameters or validation error
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                unknownParam:
                  summary: "Unknown parameter error"
                  value:
                    status: 400
                    error: "Bad Request"
                    message: "Unknown query parameters: categor_y"
                    path: "/api/v1/products"
                    timestamp: "2025-08-28T10:00:00Z"
                    details:
                      invalidParams: ["categor_y"]
                rangeError:
                  summary: "Invalid range error"
                  value:
                    status: 400
                    error: "Bad Request"
                    message: "price_gte cannot be greater than price_lte"
                    path: "/api/v1/products"
                    timestamp: "2025-08-28T10:00:00Z"
                paginationWindowExceeded:
                  $ref: '#/components/examples/PaginationWindowExceeded'
    
    post:
      tags: [Products]
      summary: Create a new product with required fields
      requestBody:
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/ProductCreate'
      responses:
        '201':
          description: Created
          headers:
            Location: 
              description: "URL of the created product"
              schema: 
                type: string
                format: uri
                example: "/api/v1/products/123"
          content:
            application/json: 
              schema: 
                $ref: '#/components/schemas/Product'
        '400': 
          description: Invalid input
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
  
  /api/v1/products/{productId}:
    get:
      tags: [Products]
      summary: Retrieve detailed information for a specific product
      parameters: 
        - in: path
          name: productId
          required: true
          schema: 
            type: integer
            format: int64
      responses:
        '200': 
          description: OK
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Product'
        '404': 
          description: Not found
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
    
    put:
      tags: [Products]
      summary: Update product with all required fields
      parameters: 
        - in: path
          name: productId
          required: true
          schema: 
            type: integer
            format: int64
      requestBody:
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/ProductUpdate'
      responses:
        '200': 
          description: Updated
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Product'
        '400': 
          description: Invalid input
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '404': 
          description: Not found
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
    
    delete:
      tags: [Products]
      summary: Permanently remove a product from the inventory system
      parameters: 
        - in: path
          name: productId
          required: true
          schema: 
            type: integer
            format: int64
      responses:
        '204': 
          description: Deleted
        '404': 
          description: Not found
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'

  # -----------------
  # Suppliers
  # -----------------
  /api/v1/suppliers:
    get:
      tags: [Suppliers]
      summary: Retrieve paginated list of suppliers with filtering and sorting
      description: >-
        Returns a paginated list of suppliers. Supports multiple filter parameters that combine with AND logic.
        City parameter can be repeated for OR logic. Unknown query parameters will result in HTTP 400.
        Default sort is by supplierName ascending. Whitelisted sort fields: supplierName, updatedAt.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/QueryParam'
        - $ref: '#/components/parameters/CityParam'
        - $ref: '#/components/parameters/UpdatedAfterParam'
      responses:
        '200':
          description: Paged suppliers matching filter criteria
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/PageSupplier'
        '400':
          description: Invalid filter parameters or validation error
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                paginationWindowExceeded:
                  $ref: '#/components/examples/PaginationWindowExceeded'
    
    post:
      tags: [Suppliers]
      summary: Register a new supplier with required fields
      requestBody:
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/SupplierCreate'
      responses:
        '201':
          description: Created
          headers:
            Location: 
              description: "URL of the created supplier"
              schema: 
                type: string
                format: uri
                example: "/api/v1/suppliers/456"
          content:
            application/json: 
              schema: 
                $ref: '#/components/schemas/Supplier'
        '400': 
          description: Invalid input
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '409': 
          description: Duplicate email
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
  
  /api/v1/suppliers/{supplierId}:
    get:
      tags: [Suppliers]
      summary: Retrieve detailed information for a specific supplier
      parameters: 
        - in: path
          name: supplierId
          required: true
          schema: 
            type: integer
            format: int64
      responses:
        '200': 
          description: OK
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Supplier'
        '404': 
          description: Not found
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
    
    put:
      tags: [Suppliers]
      summary: Update supplier with all required fields
      parameters: 
        - in: path
          name: supplierId
          required: true
          schema: 
            type: integer
            format: int64
      requestBody:
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/SupplierUpdate'
      responses:
        '200': 
          description: Updated
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Supplier'
        '400': 
          description: Invalid input
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '404': 
          description: Not found
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '409': 
          description: Duplicate email
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
    
    delete:
      tags: [Suppliers]
      summary: Permanently remove a supplier from the system
      parameters: 
        - in: path
          name: supplierId
          required: true
          schema: 
            type: integer
            format: int64
      responses:
        '204': 
          description: Deleted
        '404': 
          description: Not found
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'

  # -----------------
  # Customers
  # -----------------
  /api/v1/customers:
    get:
      tags: [Customers]
      summary: Retrieve paginated list of customers with filtering and sorting
      description: >-
        Returns a paginated list of customers. Supports multiple filter parameters that combine with AND logic.
        City and segment parameters can be repeated for OR logic. Unknown query parameters will result in HTTP 400.
        Default sort is by customerName ascending. Whitelisted sort fields: customerName, updatedAt.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/QueryParam'
        - $ref: '#/components/parameters/SegmentParam'
        - $ref: '#/components/parameters/CityParam'
        - $ref: '#/components/parameters/UpdatedAfterParam'
      responses:
        '200':
          description: Paged customers matching filter criteria
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/PageCustomer'
        '400':
          description: Invalid filter parameters or validation error
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                paginationWindowExceeded:
                  $ref: '#/components/examples/PaginationWindowExceeded'
    post:
      tags: [Customers]
      summary: Register a new customer with required fields
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCreate'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: "URL of the created customer"
              schema:
                type: string
                format: uri
                example: "/api/v1/customers/789"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Duplicate email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # -----------------
  # Campaigns
  # -----------------
  /api/v1/campaigns:
    get:
      tags: [Campaigns]
      summary: Retrieve paginated list of campaigns with filtering and sorting
      description: >-
        Returns a paginated list of campaigns. Unknown query parameters will result in HTTP 400.
        Default sort is updatedAt,desc. Whitelisted sort fields: campaignName, campaignType, startDate, endDate, updatedAt.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/QueryParam'
        - $ref: '#/components/parameters/CampaignTypeParam'
        - $ref: '#/components/parameters/CampaignStartGteParam'
        - $ref: '#/components/parameters/CampaignStartLteParam'
        - $ref: '#/components/parameters/CampaignEndGteParam'
        - $ref: '#/components/parameters/CampaignEndLteParam'
        - $ref: '#/components/parameters/CampaignActiveOnParam'
        - $ref: '#/components/parameters/UpdatedAfterParam'
      responses:
        '200':
          description: Paged campaigns matching filter criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCampaign'
        '400':
          description: Invalid filter parameters or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                paginationWindowExceeded:
                  $ref: '#/components/examples/PaginationWindowExceeded'
    post:
      tags: [Campaigns]
      summary: Create a campaign
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignCreate'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URL of the created campaign
              schema:
                type: string
                format: uri
                example: "/api/v1/campaigns/123"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict (e.g., overlapping assignments if provided)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/campaigns/{campaignId}:
    get:
      tags: [Campaigns]
      summary: Retrieve a specific campaign
      parameters:
        - in: path
          name: campaignId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [Campaigns]
      summary: Update a campaign
      parameters:
        - in: path
          name: campaignId
          required: true
          schema: {type: integer, format: int64}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict (e.g., overlapping window with assignments)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [Campaigns]
      summary: Delete a campaign
      parameters:
        - in: path
          name: campaignId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '204': {description: Deleted}
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict (e.g., deletion blocked by service rules)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/campaigns/{campaignId}/products:
    get:
      tags: [Campaigns]
      summary: List products assigned to a campaign (paged)
      parameters:
        - in: path
          name: campaignId
          required: true
          schema: {type: integer, format: int64}
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        '200':
          description: Paged products for the campaign
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageProductSummary'
        '404':
          description: Campaign not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags: [Campaigns]
      summary: Assign products to a campaign (batch)
      parameters:
        - in: path
          name: campaignId
          required: true
          schema: {type: integer, format: int64}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignAssignProductsRequest'
      responses:
        '204': {description: Assigned}
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Campaign or product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Overlapping campaign window for one or more products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/campaigns/{campaignId}/products/{productId}:
    post:
      tags: [Campaigns]
      summary: Assign a product to a campaign
      parameters:
        - in: path
          name: campaignId
          required: true
          schema: {type: integer, format: int64}
        - in: path
          name: productId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '204': {description: Assigned}
        '404':
          description: Campaign or product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Overlapping campaign window
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [Campaigns]
      summary: Remove a product from a campaign
      parameters:
        - in: path
          name: campaignId
          required: true
          schema: {type: integer, format: int64}
        - in: path
          name: productId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '204': {description: Removed}
        '404':
          description: Campaign or product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # -----------------
  # Customer Special Offers
  # -----------------
  /api/v1/customer-special-offers:
    get:
      tags: [CustomerSpecialOffers]
      summary: Retrieve paginated list of customer special offers with filtering and sorting
      description: >-
        Unknown query parameters will result in HTTP 400. Default sort is updatedAt,desc.
        Whitelisted sort fields: customerId, percentOff, startDate, endDate, updatedAt.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/CSOCustomerIdParam'
        - $ref: '#/components/parameters/CSOPercentGteParam'
        - $ref: '#/components/parameters/CSOPercentLteParam'
        - $ref: '#/components/parameters/CSOStartGteParam'
        - $ref: '#/components/parameters/CSOStartLteParam'
        - $ref: '#/components/parameters/CSOEndGteParam'
        - $ref: '#/components/parameters/CSOEndLteParam'
        - $ref: '#/components/parameters/CSOActiveOnParam'
        - $ref: '#/components/parameters/UpdatedAfterParam'
      responses:
        '200':
          description: Paged offers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCustomerSpecialOffer'
        '400':
          description: Invalid or unknown parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                paginationWindowExceeded:
                  $ref: '#/components/examples/PaginationWindowExceeded'
    post:
      tags: [CustomerSpecialOffers]
      summary: Create a customer special offer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerSpecialOfferCreate'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URL of the created offer
              schema:
                type: string
                format: uri
                example: "/api/v1/customer-special-offers/123"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSpecialOffer'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Offer conflict (one active per customer)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/customer-special-offers/{specialOfferId}:
    get:
      tags: [CustomerSpecialOffers]
      summary: Retrieve a specific offer
      parameters:
        - in: path
          name: specialOfferId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSpecialOffer'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [CustomerSpecialOffers]
      summary: Update a customer special offer
      parameters:
        - in: path
          name: specialOfferId
          required: true
          schema: {type: integer, format: int64}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerSpecialOfferUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSpecialOffer'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Offer conflict (one active per customer)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [CustomerSpecialOffers]
      summary: Delete an offer
      parameters:
        - in: path
          name: specialOfferId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '204': {description: Deleted}
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/customers/{customerId}/special-offers:
    get:
      tags: [CustomerSpecialOffers]
      summary: List offers for a customer (paged)
      parameters:
        - in: path
          name: customerId
          required: true
          schema: {type: integer, format: int64}
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/UpdatedAfterParam'
      responses:
        '200':
          description: Paged offers for the customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCustomerSpecialOffer'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # -----------------
  # Purchase Orders
  # -----------------
  /api/v1/purchase-orders:
    get:
      tags: [PurchaseOrders]
      summary: Retrieve paginated list of purchase orders with filtering and sorting
      description: >-
        Unknown query parameters will result in HTTP 400. Default sort is updatedAt,desc.
        Whitelisted sort fields: orderDate, expectedDelivery, status, updatedAt.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PurchaseOrderSupplierIdParam'
        - $ref: '#/components/parameters/PurchaseOrderStatusParam'
        - $ref: '#/components/parameters/PurchaseOrderOrderDateGteParam'
        - $ref: '#/components/parameters/PurchaseOrderOrderDateLteParam'
        - $ref: '#/components/parameters/PurchaseOrderEtaGteParam'
        - $ref: '#/components/parameters/PurchaseOrderEtaLteParam'
        - $ref: '#/components/parameters/PurchaseOrderReceivedSinceParam'
        - $ref: '#/components/parameters/UpdatedAfterParam'
      responses:
        '200':
          description: Paged purchase orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagePurchaseOrder'
        '400':
          description: Invalid or unknown parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                paginationWindowExceeded:
                  $ref: '#/components/examples/PaginationWindowExceeded'
    post:
      tags: [PurchaseOrders]
      summary: Create a purchase order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseOrderCreate'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URL of the created purchase order
              schema:
                type: string
                format: uri
                example: "/api/v1/purchase-orders/123"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseOrder'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/purchase-orders/{purchaseOrderId}:
    get:
      tags: [PurchaseOrders]
      summary: Retrieve a specific purchase order
      parameters:
        - in: path
          name: purchaseOrderId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseOrder'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [PurchaseOrders]
      summary: Update a purchase order
      parameters:
        - in: path
          name: purchaseOrderId
          required: true
          schema: {type: integer, format: int64}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseOrderUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseOrder'
        '400':
          description: Invalid input or invalid state transitions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: State conflict (e.g., cancelling with received quantity)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [PurchaseOrders]
      summary: Delete a purchase order
      parameters:
        - in: path
          name: purchaseOrderId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '204': {description: Deleted}
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: State conflict (blocked by service rules)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/purchase-orders/{purchaseOrderId}/items:
    get:
      tags: [PurchaseOrderItems]
      summary: List items for a purchase order (paged)
      parameters:
        - in: path
          name: purchaseOrderId
          required: true
          schema: {type: integer, format: int64}
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        '200':
          description: Paged items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagePurchaseOrderItem'
        '404':
          description: Purchase order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags: [PurchaseOrderItems]
      summary: Add an item to a purchase order
      parameters:
        - in: path
          name: purchaseOrderId
          required: true
          schema: {type: integer, format: int64}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseOrderItemCreate'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URL of the created item
              schema:
                type: string
                format: uri
                example: "/api/v1/purchase-order-items/456"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseOrderItem'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Purchase order or product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Duplicate item (same product per purchase order)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/purchase-order-items/{purchaseOrderItemId}:
    get:
      tags: [PurchaseOrderItems]
      summary: Retrieve a purchase order item
      parameters:
        - in: path
          name: purchaseOrderItemId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseOrderItem'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [PurchaseOrderItems]
      summary: Update a purchase order item
      parameters:
        - in: path
          name: purchaseOrderItemId
          required: true
          schema: {type: integer, format: int64}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseOrderItemUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseOrderItem'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: State conflict (cannot change unitPrice after any quantityReceived > 0)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [PurchaseOrderItems]
      summary: Delete a purchase order item
      parameters:
        - in: path
          name: purchaseOrderItemId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '204': {description: Deleted}
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /api/v1/customers/{customerId}:
    get:
      tags: [Customers]
      summary: Retrieve detailed information for a specific customer
      parameters: 
        - in: path
          name: customerId
          required: true
          schema: 
            type: integer
            format: int64
      responses:
        '200': 
          description: OK
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Customer'
        '404': 
          description: Not found
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
    
    put:
      tags: [Customers]
      summary: Update customer with all required fields
      parameters: 
        - in: path
          name: customerId
          required: true
          schema: 
            type: integer
            format: int64
      requestBody:
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/CustomerUpdate'
      responses:
        '200': 
          description: Updated
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Customer'
        '400': 
          description: Invalid input
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '404': 
          description: Not found
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '409': 
          description: Duplicate email
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
    
    delete:
      tags: [Customers]
      summary: Permanently remove a customer from the system
      parameters: 
        - in: path
          name: customerId
          required: true
          schema: 
            type: integer
            format: int64
      responses:
        '204': 
          description: Deleted
        '404': 
          description: Not found
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'