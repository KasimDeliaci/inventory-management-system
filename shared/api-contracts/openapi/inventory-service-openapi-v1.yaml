openapi: 3.0.0
info:
  title: Inventory Service API
  version: 1.0.0
  description: >-
    CRUD for master data (Products, Suppliers, Customers) with comprehensive filtering support.
    Integer IDs, no auth. Timestamps are read-only and maintained in app code (e.g., JPA auditing).
    
    ## Filtering Rules
    - **AND logic** across different parameter types (narrows results)
    - **OR logic** within repeatable parameters (broadens within that field)
    - **Case-insensitive** text matching for better UX
    - **Unknown parameters** return HTTP 400 to catch typos early
    - **Range parameters** are inclusive (gte = greater than or equal, lte = less than or equal)
    - **Date-time parameters** must be in UTC (ending with Z or +00:00)
    
    ## Performance Notes
    - Text search (`q` parameter) performs substring matching and may be slow on large datasets
    - Maximum pagination window is 10,000 records (page * size cannot exceed 10,000)
    - Most filters are index-backed; `q` may be slower on very large datasets
    
servers:
  - url: http://localhost:8000
    description: Local dev
  - url: http://inventory:8000
    description: In-cluster name

components:
  parameters:
    # ---- Pagination Parameters ----
    PageParam: 
      in: query
      name: page
      description: "0-based page number"
      schema: {type: integer, minimum: 0, default: 0}
    
    SizeParam: 
      in: query
      name: size
      description: "Page size (max 200)"
      schema: {type: integer, minimum: 1, maximum: 200, default: 20}
    
    SortParam: 
      in: query
      name: sort
      description: "Sort clause with format: field,direction (asc|desc). Invalid fields return 400."
      schema: {type: string, pattern: '^[A-Za-z]+,([Aa][Ss][Cc]|[Dd][Ee][Ss][Cc])$', example: "productName,asc"}

    IncludeDeletedParam:
      in: query
      name: include_deleted
      description: "Include soft-deleted records (default false). Applies to master data: products, suppliers, customers."
      schema: {type: boolean, default: false}
    
    # ---- Common Filter Parameters ----
    QueryParam:
      in: query
      name: q
      description: >-
        Text search query. Searches across name and description/email fields.
        Minimum 2 characters required. Case-insensitive substring match.
        Note: This performs a substring search and may be slow on very large datasets.
      schema: {type: string, minLength: 2, example: "banana"}
    
    UpdatedAfterParam:
      in: query
      name: updated_after
      description: >-
        Filter records updated after this timestamp (inclusive).
        Must be in UTC format with Z suffix or +00:00 offset.
      schema: {type: string, format: date-time, example: "2025-08-01T00:00:00Z"}
    
    # ---- Product-specific Filter Parameters ----
    CategoryParam:
      in: query
      name: category
      description: >-
        Filter by product category. Case-insensitive exact match.
        Can be repeated for OR logic (e.g., category=Snacks&category=Drinks).
      schema: {type: array, items: {type: string, maxLength: 100}, minItems: 1}
      style: form
      explode: true
      example: ["Electronics", "Accessories"]
    
    UomParam:
      in: query
      name: uom
      description: >-
        Filter by unit of measure. Case-insensitive exact match.
        Can be repeated for OR logic. Allowed values (validated server-side & DB): adet, ton, kg, g, lt, ml, koli, paket, çuval, şişe.
      schema: {type: array, items: {type: string}, minItems: 1}
      style: form
      explode: true
      example: ["kg", "g"]
    
    PriceGteParam:
      in: query
      name: price_gte
      description: "Minimum price (inclusive). Must be >= 0 and <= 99999999.99"
      schema: {type: number, format: double, minimum: 0, maximum: 99999999.99, example: 10.00}
    
    PriceLteParam:
      in: query
      name: price_lte
      description: "Maximum price (inclusive). Must be >= price_gte if both provided"
      schema: {type: number, format: double, minimum: 0, maximum: 99999999.99, example: 50.00}
    
    SafetyGteParam:
      in: query
      name: safety_gte
      description: "Minimum safety stock level (inclusive)"
      schema: {type: number, format: double, minimum: 0, maximum: 99999999.99, example: 0}
    
    SafetyLteParam:
      in: query
      name: safety_lte
      description: "Maximum safety stock level (inclusive)"
      schema: {type: number, format: double, minimum: 0, maximum: 99999999.99, example: 5}
    
    ReorderGteParam:
      in: query
      name: reorder_gte
      description: "Minimum reorder point (inclusive)"
      schema: {type: number, format: double, minimum: 0, maximum: 99999999.99, example: 10}
    
    ReorderLteParam:
      in: query
      name: reorder_lte
      description: "Maximum reorder point (inclusive)"
      schema: {type: number, format: double, minimum: 0, maximum: 99999999.99, example: 25}
    
    # ---- Supplier/Customer Filter Parameters ----
    CityParam:
      in: query
      name: city
      description: >-
        Filter by city. Case-insensitive exact match.
        Can be repeated for OR logic (e.g., city=Istanbul&city=Ankara).
      schema: {type: array, items: {type: string, maxLength: 50}, minItems: 1}
      style: form
      explode: true
      example: ["Istanbul", "Ankara"]
    
    # ---- Customer-specific Filter Parameters ----
    SegmentParam:
      in: query
      name: segment
      description: >-
        Filter by customer segment. Exact match against enum values.
        Can be repeated for OR logic.
      schema: {type: array, items: {type: string, enum: [INDIVIDUAL, SME, CORPORATE, ENTERPRISE, OTHER]}, minItems: 1}
      style: form
      explode: true
      example: ["SME", "CORPORATE"]

    # ---- Product-Suppliers Filter Parameters ----
    ProductSupplierProductIdParam:
      in: query
      name: product_id
      description: >-
        Filter by product IDs. Repeatable for OR logic within the same parameter.
        Only allowed on top-level /product-suppliers (not on nested by product).
      schema:
        type: array
        items: {type: integer, format: int64}
        minItems: 1
      style: form
      explode: true
      example: [101, 102]

    ProductSupplierSupplierIdParam:
      in: query
      name: supplier_id
      description: >-
        Filter by supplier IDs. Repeatable for OR logic within the same parameter.
        Only allowed on top-level /product-suppliers (not on nested by supplier).
      schema:
        type: array
        items: {type: integer, format: int64}
        minItems: 1
      style: form
      explode: true
      example: [11, 12]

    ProductSupplierActiveParam:
      in: query
      name: active
      description: >-
        Filter by active status. If omitted, returns both active and inactive records.
      schema: {type: boolean}

    ProductSupplierPreferredParam:
      in: query
      name: preferred
      description: >-
        Filter by preferred status. Maps to isPreferred on the link resource.
        Note: At most one preferred per product (regardless of active) enforced by DB.
      schema: {type: boolean}

    ProductSupplierLastDeliverySinceParam:
      in: query
      name: last_delivery_since
      description: >-
        Filter by last delivery date (inclusive). Format: YYYY-MM-DD.
      schema: {type: string, format: date, example: "2025-08-01"}

    # ---- Campaigns Filter Parameters ----
    CampaignTypeParam:
      in: query
      name: type
      description: >-
        Filter by campaign type. Repeatable for OR logic.
      schema:
        type: array
        items: {type: string, enum: [DISCOUNT, BXGY_SAME_PRODUCT]}
        minItems: 1
      style: form
      explode: true
      example: [DISCOUNT]

    CampaignStartGteParam:
      in: query
      name: start_gte
      description: "Start date greater than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    CampaignStartLteParam:
      in: query
      name: start_lte
      description: "Start date less than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    CampaignEndGteParam:
      in: query
      name: end_gte
      description: "End date greater than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    CampaignEndLteParam:
      in: query
      name: end_lte
      description: "End date less than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    CampaignActiveOnParam:
      in: query
      name: active_on
      description: >-
        Return campaigns active on this date (inclusive window check). Format: YYYY-MM-DD.
      schema: {type: string, format: date}

    # ---- Customer Special Offers Filter Parameters ----
    CSOCustomerIdParam:
      in: query
      name: customer_id
      description: >-
        Filter by customer IDs. Repeatable for OR logic within the same parameter.
      schema:
        type: array
        items: {type: integer, format: int64}
        minItems: 1
      style: form
      explode: true
      example: [501, 502]

    CSOPercentGteParam:
      in: query
      name: percent_gte
      description: "Minimum percentOff (inclusive). 0-100"
      schema: {type: number, format: double, minimum: 0, maximum: 100}

    CSOPercentLteParam:
      in: query
      name: percent_lte
      description: "Maximum percentOff (inclusive). 0-100"
      schema: {type: number, format: double, minimum: 0, maximum: 100}

    CSOStartGteParam:
      in: query
      name: start_gte
      description: "Start date greater than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    CSOStartLteParam:
      in: query
      name: start_lte
      description: "Start date less than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    CSOEndGteParam:
      in: query
      name: end_gte
      description: "End date greater than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    CSOEndLteParam:
      in: query
      name: end_lte
      description: "End date less than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    CSOActiveOnParam:
      in: query
      name: active_on
      description: >-
        Return offers active on this date (inclusive window check). Format: YYYY-MM-DD.
      schema: {type: string, format: date}

    # ---- Purchase Orders Filter Parameters ----
    PurchaseOrderSupplierIdParam:
      in: query
      name: supplier_id
      description: >-
        Filter by supplier IDs. Repeatable for OR logic.
      schema:
        type: array
        items: {type: integer, format: int64}
        minItems: 1
      style: form
      explode: true
      example: [11, 12]

    PurchaseOrderStatusParam:
      in: query
      name: status
      description: >-
        Filter by purchase order status. Repeatable for OR logic.
      schema:
        type: array
        items: {type: string, enum: [PLACED, IN_TRANSIT, RECEIVED, CANCELLED]}
        minItems: 1
      style: form
      explode: true
      example: [IN_TRANSIT, PLACED]

    PurchaseOrderOrderDateGteParam:
      in: query
      name: order_date_gte
      description: "Order date greater than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    PurchaseOrderOrderDateLteParam:
      in: query
      name: order_date_lte
      description: "Order date less than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    PurchaseOrderEtaGteParam:
      in: query
      name: expected_delivery_gte
      description: "Expected delivery date greater than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    PurchaseOrderEtaLteParam:
      in: query
      name: expected_delivery_lte
      description: "Expected delivery date less than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    PurchaseOrderReceivedSinceParam:
      in: query
      name: received_since
      description: >-
        Filter by actualDelivery timestamp >= this value (inclusive). Must be UTC with Z or +00:00.
      schema: {type: string, format: date-time}

    # ---- Sales Orders Filter Parameters ----
    SalesOrderCustomerIdParam:
      in: query
      name: customer_id
      description: >-
        Filter by customer IDs. Repeatable for OR logic.
      schema:
        type: array
        items: {type: integer, format: int64}
        minItems: 1
      style: form
      explode: true
      example: [501, 502]

    SalesOrderStatusParam:
      in: query
      name: status
      description: >-
        Filter by sales order status. Repeatable for OR logic.
      schema:
        type: array
        items: {type: string, enum: [PENDING, ALLOCATED, IN_TRANSIT, DELIVERED, CANCELLED]}
        minItems: 1
      style: form
      explode: true
      example: [IN_TRANSIT, PENDING]

    SalesOrderOrderDateGteParam:
      in: query
      name: order_date_gte
      description: "Order date greater than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    SalesOrderOrderDateLteParam:
      in: query
      name: order_date_lte
      description: "Order date less than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    SalesOrderDeliveryDateGteParam:
      in: query
      name: delivery_date_gte
      description: "Delivery date greater than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    SalesOrderDeliveryDateLteParam:
      in: query
      name: delivery_date_lte
      description: "Delivery date less than or equal (inclusive). Format: YYYY-MM-DD"
      schema: {type: string, format: date}

    SalesOrderDeliveredSinceParam:
      in: query
      name: delivered_since
      description: >-
        Filter by deliveredAt timestamp >= this value (inclusive). Must be UTC with Z or +00:00.
      schema: {type: string, format: date-time}

    # ---- Stock Parameters (V7) ----
    StockProductIdParam:
      in: query
      name: product_id
      description: >-
        Filter by product IDs. Repeatable for OR logic within the same parameter.
      schema:
        type: array
        items: {type: integer, format: int64}
        minItems: 1
      style: form
      explode: true
      example: [101, 102]

    MovementSourceParam:
      in: query
      name: movement_source
      description: >-
        Filter by movement source. Repeatable for OR logic within the same parameter.
      schema:
        type: array
        items: { $ref: '#/components/schemas/MovementSource' }
        minItems: 1
      style: form
      explode: true
      example: [PURCHASE_ORDER, SALES_ORDER]

    MovementKindParam:
      in: query
      name: movement_kind
      description: >-
        Filter by movement kind. Repeatable for OR logic within the same parameter.
      schema:
        type: array
        items: { $ref: '#/components/schemas/MovementKind' }
        minItems: 1
      style: form
      explode: true
      example: [PURCHASE_RECEIPT, SALE_SHIPMENT]

    MovementDateGteParam:
      in: query
      name: movement_date_gte
      description: "Movement date greater than or equal (inclusive). Must be UTC with Z or +00:00. Maps to movementDate."
      schema: {type: string, format: date-time}

    MovementDateLteParam:
      in: query
      name: movement_date_lte
      description: "Movement date less than or equal (inclusive). Must be UTC with Z or +00:00. Maps to movementDate."
      schema: {type: string, format: date-time}

    SourceIdParam:
      in: query
      name: source_id
      description: "Filter by source header ID (e.g., purchaseOrderId or salesOrderId)."
      schema: {type: integer, format: int64}

    SourceItemIdParam:
      in: query
      name: source_item_id
      description: "Filter by source line ID (e.g., purchaseOrderItemId or salesOrderItemId)."
      schema: {type: integer, format: int64}

    StockUpdatedAfterParam:
      in: query
      name: updated_after
      description: >-
        Filter records updated after this timestamp (inclusive). For stock-movements this maps to createdAt; for current-stock this maps to lastUpdated. Must be UTC with Z or +00:00.
      schema: {type: string, format: date-time}

    CurrentStockAvailableGteParam:
      in: query
      name: available_gte
      description: "Minimum available quantity (inclusive). Maps to quantityAvailable."
      schema: {type: number, format: double}

    CurrentStockAvailableLteParam:
      in: query
      name: available_lte
      description: "Maximum available quantity (inclusive). Maps to quantityAvailable."
      schema: {type: number, format: double}

    CurrentStockOnHandGteParam:
      in: query
      name: on_hand_gte
      description: "Minimum on-hand quantity (inclusive). Maps to quantityOnHand."
      schema: {type: number, format: double}

    CurrentStockOnHandLteParam:
      in: query
      name: on_hand_lte
      description: "Maximum on-hand quantity (inclusive). Maps to quantityOnHand."
      schema: {type: number, format: double}

    # ---- Forecast Parameters ----
    ForecastFromParam:
      in: query
      name: from
      description: Start date (inclusive). Format YYYY-MM-DD.
      required: true
      schema: {type: string, format: date}
    ForecastToParam:
      in: query
      name: to
      description: End date (inclusive). Format YYYY-MM-DD.
      required: true
      schema: {type: string, format: date}
    ForecastProductIdParam:
      in: query
      name: product_id
      description: Optional filter by product IDs. Repeatable.
      required: false
      schema:
        type: array
        items: {type: integer, format: int64}
        minItems: 1
      style: form
      explode: true

  examples:
    PaginationWindowExceeded:
      summary: "Pagination window exceeded"
      value:
        status: 400
        error: "Bad Request"
        message: "page * size cannot exceed 10,000"
        path: "/api/v1/resource"
        timestamp: "2025-08-28T10:00:00Z"
  schemas:
    # -----------------------------
    # Stock (V7)
    # -----------------------------
    MovementSource:
      type: string
      description: "Source of stock movement"
      enum: [PURCHASE_ORDER, SALES_ORDER, ADJUSTMENT]

    MovementKind:
      type: string
      description: "Kind of stock movement"
      enum: [PURCHASE_RECEIPT, SALE_SHIPMENT, ADJUSTMENT_IN, ADJUSTMENT_OUT]

    StockMovement:
      type: object
      description: "Append-only audit row of a physical stock change."
      properties:
        movementId: {type: integer, format: int64}
        productId: {type: integer, format: int64}
        movementSource: { $ref: '#/components/schemas/MovementSource' }
        movementKind: { $ref: '#/components/schemas/MovementKind' }
        sourceId: {type: integer, format: int64, nullable: true}
        sourceItemId: {type: integer, format: int64, nullable: true}
        quantity:
          type: number
          format: double
          description: "Stored as NUMERIC(12,3)"
        movementDate: {type: string, format: date-time}
        createdAt: {type: string, format: date-time}

    CurrentStock:
      type: object
      description: "Per-product snapshot of current quantities (not directly created via API)."
      properties:
        productId: {type: integer, format: int64}
        quantityOnHand: {type: number, format: double}
        quantityReserved: {type: number, format: double}
        quantityAvailable:
          type: number
          format: double
          readOnly: true
          description: "Derived: quantityOnHand - quantityReserved"
        lastMovementId: {type: integer, format: int64, nullable: true}
        lastUpdated: {type: string, format: date-time}

    StockAdjustmentCreate:
      type: object
      description: "Create an adjustment movement (only ADJUSTMENT_IN or ADJUSTMENT_OUT)."
      required: [productId, movementKind, quantity]
      properties:
        productId: {type: integer, format: int64}
        movementKind:
          $ref: '#/components/schemas/MovementKind'
        quantity:
          type: number
          format: double
          minimum: 0.001
          multipleOf: 0.001
        movementDate:
          type: string
          format: date-time
          nullable: true
          description: "Optional; defaults to now if omitted."

    PageStockMovement:
      type: object
      properties:
        content:
          type: array
          items: { $ref: '#/components/schemas/StockMovement' }
        page:
          $ref: '#/components/schemas/PageMeta'

    PageCurrentStock:
      type: object
      properties:
        content:
          type: array
          items: { $ref: '#/components/schemas/CurrentStock' }
        page:
          $ref: '#/components/schemas/PageMeta'
    # -----------------------------
    # ENUMS (from V1__types.sql)
    # -----------------------------
    CustomerSegment: 
      type: string
      description: "Business segment classification for customer categorization and pricing strategies"
      enum: [INDIVIDUAL, SME, CORPORATE, ENTERPRISE, OTHER]
      example: SME

    # -----------------------------
    # Shared pagination & errors
    # -----------------------------
    PageMeta:
      type: object
      properties:
        page: {type: integer, description: "Current page number (0-based)"}
        size: {type: integer, description: "Number of elements per page"}
        totalElements: {type: integer, description: "Total number of elements across all pages"}
        totalPages: {type: integer, description: "Total number of pages available"}
    
    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          example: 400
        error:
          type: string
          example: "Bad Request"
        code:
          type: string
          description: Machine-readable error code (e.g., PRODUCT_IN_USE, PREFERRED_CONFLICT)
          example: "PREFERRED_CONFLICT"
        message:
          type: string
          example: "Invalid query parameters."
        path:
          type: string
          example: "/api/v1/current-stock"
        timestamp:
          type: string
          format: date-time
        details:
          type: object
          description: "Additional error details for validation failures."
          properties:
            validationErrors:
              type: object
              additionalProperties:
                type: string
              example:
                price_gte: "Must be greater than or equal to 0"
                q: "Minimum length is 2 characters"

    # -----------------------------
    # Product
    # -----------------------------
    Product:
      type: object
      required: [productId, productName, category, unitOfMeasure, safetyStock, reorderPoint, currentPrice]
      properties:
        productId: {type: integer, format: int64, example: 101, description: "Unique identifier for the product"}
        productName: {type: string, maxLength: 200, example: "iPhone 15 Pro", description: "Name of the product (max 200 characters)"}
        description: {type: string, nullable: true, example: "Latest model with advanced camera system", description: "Optional detailed description of the product"}
        category: {type: string, maxLength: 100, example: "Electronics", description: "Product category for organization and filtering (max 100 characters)"}
        unitOfMeasure: {type: string, maxLength: 20, minLength: 1, example: "adet", description: "Unit of measurement. Allowed: adet, ton, kg, g, lt, ml, koli, paket, çuval, şişe"}
        safetyStock: {type: number, format: double, minimum: 0, example: 10, description: "Minimum stock level that triggers reordering alerts"}
        reorderPoint: {type: number, format: double, minimum: 0, example: 25, description: "Stock level threshold for automatic reordering (must be >= safetyStock)"}
        currentPrice: {type: number, format: double, minimum: 0, example: 1299.99, description: "Current selling price of the product"}
        createdAt: {type: string, format: date-time, readOnly: true, description: "Timestamp when the product was created"}
        updatedAt: {type: string, format: date-time, readOnly: true, description: "Timestamp when the product was last updated"}
        deletedAt: {type: string, format: date-time, nullable: true, readOnly: true, description: "Soft-delete timestamp; null means active"}
    
    ProductCreate:
      type: object
      required: [productName, category, unitOfMeasure, safetyStock, reorderPoint, currentPrice]
      properties:
        productName: {type: string, minLength: 1, maxLength: 200, description: "Name of the product (1-200 characters)"}
        description: {type: string, nullable: true, description: "Optional detailed description of the product"}
        category: {type: string, minLength: 1, maxLength: 100, description: "Product category for organization (1-100 characters)"}
        unitOfMeasure: {type: string, minLength: 1, maxLength: 20, example: "adet", description: "Unit of measurement. Allowed: adet, ton, kg, g, lt, ml, koli, paket, çuval, şişe"}
        safetyStock: {type: number, format: double, minimum: 0, maximum: 99999999.99, description: "Minimum stock level that triggers reordering alerts"}
        reorderPoint: {type: number, format: double, minimum: 0, maximum: 99999999.99, description: "Stock level threshold for automatic reordering (must be >= safetyStock)"}
        currentPrice: {type: number, format: double, minimum: 0, maximum: 99999999.99, description: "Current selling price of the product"}
    
    ProductUpdate:
      allOf:
        - $ref: '#/components/schemas/ProductCreate'

    PageProduct:
      type: object
      properties:
        content:
          type: array
          items: 
            $ref: '#/components/schemas/Product'
        page: 
          $ref: '#/components/schemas/PageMeta'

    # Lightweight list item structures for /api/v1/products
    SupplierRef:
      type: object
      description: "Minimal supplier reference (id + name) used in list rows"
      properties:
        supplierId: {type: integer, format: int64}
        supplierName: {type: string}

    ProductListItem:
      type: object
      description: >-
        Lightweight product row for list screens. Includes inventory snapshot
        and supplier hints. Status is a simple string computed from thresholds
        (no enum on purpose).
      properties:
        productId: {type: integer, format: int64}
        productName: {type: string}
        category: {type: string}
        unitOfMeasure: {type: string}
        quantityAvailable:
          type: number
          format: double
          description: "From current_stock.quantity_available; defaults to 0 if missing"
        activeSuppliers:
          type: array
          description: "All active suppliers for the product (id+name)"
          items: { $ref: '#/components/schemas/SupplierRef' }
        preferredSupplier:
          allOf:
            - $ref: '#/components/schemas/SupplierRef'
          nullable: true
          description: "Preferred supplier if set; null otherwise"
        inventoryStatus:
          type: string
          description: >-
            Computed in service: RED if available < safetyStock; YELLOW if
            safetyStock <= available <= reorderPoint; GREEN if available > reorderPoint.

    PageProductListItem:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProductListItem'
        page:
          $ref: '#/components/schemas/PageMeta'

    # -----------------------------
    # Supplier
    # -----------------------------
    Supplier:
      type: object
      required: [supplierId, supplierName, email, phone, city]
      properties:
        supplierId: {type: integer, format: int64, example: 11, description: "Unique identifier for the supplier"}
        supplierName: {type: string, maxLength: 200, example: "Acme Foods Ltd", description: "Name of the supplier company (max 200 characters)"}
        email: {type: string, format: email, maxLength: 100, example: "contact@acmefoods.com", description: "Unique among non-deleted suppliers (max 100 characters)"}
        phone: {type: string, maxLength: 30, pattern: "^[+]?[0-9\\s\\-\\(\\)]+$", example: "+90 212 555 0123", description: "Contact phone number (max 30 characters)"}
        city: {type: string, maxLength: 50, example: "Istanbul", description: "City where the supplier is located (max 50 characters)"}
        createdAt: {type: string, format: date-time, readOnly: true, description: "Timestamp when the supplier was created"}
        updatedAt: {type: string, format: date-time, readOnly: true, description: "Timestamp when the supplier was last updated"}
        deletedAt: {type: string, format: date-time, nullable: true, readOnly: true, description: "Soft-delete timestamp; null means active"}
    
    SupplierCreate:
      type: object
      required: [supplierName, email, phone, city]
      properties:
        supplierName: {type: string, minLength: 1, maxLength: 200, description: "Name of the supplier company (1-200 characters)"}
        email: {type: string, format: email, maxLength: 100, description: "Unique among non-deleted suppliers (max 100 characters)"}
        phone: {type: string, maxLength: 30, pattern: "^[+]?[0-9\\s\\-\\(\\)]+$", description: "Contact phone number (max 30 characters)"}
        city: {type: string, minLength: 1, maxLength: 50, description: "City where the supplier is located (1-50 characters)"}
    
    SupplierUpdate:
      allOf:
        - $ref: '#/components/schemas/SupplierCreate'

    PageSupplier:
      type: object
      properties:
        content:
          type: array
          items: 
            $ref: '#/components/schemas/Supplier'
        page: 
          $ref: '#/components/schemas/PageMeta'

    # -----------------------------
    # Customer
    # -----------------------------
    Customer:
      type: object
      required: [customerId, customerName, customerSegment, email, phone, city]
      properties:
        customerId: {type: integer, format: int64, example: 501, description: "Unique identifier for the customer"}
        customerName: {type: string, maxLength: 200, example: "Blue Mart Electronics", description: "Name of the customer or company (max 200 characters)"}
        customerSegment: {$ref: '#/components/schemas/CustomerSegment', description: "Business segment classification of the customer"}
        email: {type: string, format: email, maxLength: 100, example: "orders@bluemart.com", description: "Unique among non-deleted customers (max 100 characters)"}
        phone: {type: string, maxLength: 30, pattern: "^[+]?[0-9\\s\\-\\(\\)]+$", example: "+90 532 123 4567", description: "Contact phone number (max 30 characters)"}
        city: {type: string, maxLength: 50, example: "Ankara", description: "City where the customer is located (max 50 characters)"}
        createdAt: {type: string, format: date-time, readOnly: true, description: "Timestamp when the customer was created"}
        updatedAt: {type: string, format: date-time, readOnly: true, description: "Timestamp when the customer was last updated"}
        deletedAt: {type: string, format: date-time, nullable: true, readOnly: true, description: "Soft-delete timestamp; null means active"}
    
    CustomerCreate:
      type: object
      required: [customerName, customerSegment, email, phone, city]
      properties:
        customerName: {type: string, minLength: 1, maxLength: 200, description: "Name of the customer or company (1-200 characters)"}
        customerSegment: {$ref: '#/components/schemas/CustomerSegment', description: "Business segment classification of the customer"}
        email: {type: string, format: email, maxLength: 100, description: "Unique among non-deleted customers (max 100 characters)"}
        phone: {type: string, maxLength: 30, pattern: "^[+]?[0-9\\s\\-\\(\\)]+$", description: "Contact phone number (max 30 characters)"}
        city: {type: string, minLength: 1, maxLength: 50, description: "City where the customer is located (1-50 characters)"}
        
    CustomerUpdate:
      allOf:
        - $ref: '#/components/schemas/CustomerCreate'

    PageCustomer:
      type: object
      properties:
        content:
          type: array
          items: 
            $ref: '#/components/schemas/Customer'
        page: 
          $ref: '#/components/schemas/PageMeta'

    # -----------------------------
    # Product-Suppliers
    # -----------------------------
    ProductSupplierLink:
      type: object
      description: Canonical product–supplier link with operational flags and simple KPIs.
      properties:
        productSupplierId: {type: integer, format: int64}
        productId: {type: integer, format: int64}
        supplierId: {type: integer, format: int64}
        minOrderQuantity: {type: number, format: double, description: "Minimum order quantity for this link (3 decimals)"}
        isPreferred: {type: boolean}
        active: {type: boolean}
        avgLeadTimeDays: {type: number, format: double, nullable: true, readOnly: true}
        avgDelayDays: {type: number, format: double, nullable: true, readOnly: true}
        totalOrdersCount: {type: integer, readOnly: true}
        delayedOrdersCount: {type: integer, readOnly: true}
        lastDeliveryDate: {type: string, format: date, nullable: true}
        createdAt: {type: string, format: date-time, readOnly: true}
        updatedAt: {type: string, format: date-time, readOnly: true}

    ProductSupplierCreate:
      type: object
      required: [productId, supplierId, minOrderQuantity]
      properties:
        productId: {type: integer, format: int64}
        supplierId: {type: integer, format: int64}
        minOrderQuantity: {type: number, format: double, minimum: 0.001, description: "Must be > 0"}
        isPreferred: {type: boolean, default: false}
        active: {type: boolean, default: true}

    ProductSupplierUpdate:
      type: object
      properties:
        minOrderQuantity: {type: number, format: double, minimum: 0.001}
        isPreferred: {type: boolean}
        active: {type: boolean}

    SupplierSummary:
      type: object
      properties:
        supplierId: {type: integer, format: int64}
        supplierName: {type: string}
        city: {type: string}

    ProductSummary:
      type: object
      properties:
        productId: {type: integer, format: int64}
        productName: {type: string}
        category: {type: string}

    ProductSupplierWithSupplier:
      type: object
      properties:
        supplier:
          $ref: '#/components/schemas/SupplierSummary'
        link:
          $ref: '#/components/schemas/ProductSupplierLink'

    ProductSupplierWithProduct:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/ProductSummary'
        link:
          $ref: '#/components/schemas/ProductSupplierLink'

    PageProductSupplierLink:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProductSupplierLink'
        page:
          $ref: '#/components/schemas/PageMeta'

    PageProductSupplierWithSupplier:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProductSupplierWithSupplier'
        page:
          $ref: '#/components/schemas/PageMeta'

    PageProductSupplierWithProduct:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProductSupplierWithProduct'
        page:
          $ref: '#/components/schemas/PageMeta'

    # -----------------------------
    # Campaigns & Customer Special Offers
    # -----------------------------
    CampaignType:
      type: string
      enum: [DISCOUNT, BXGY_SAME_PRODUCT]

    Campaign:
      type: object
      required: [campaignId, campaignName, campaignType, startDate, endDate]
      properties:
        campaignId: {type: integer, format: int64}
        campaignName: {type: string}
        campaignType: {$ref: '#/components/schemas/CampaignType'}
        discountPercentage: {type: number, format: double, minimum: 0, maximum: 100, nullable: true}
        buyQty: {type: integer, minimum: 1, nullable: true}
        getQty: {type: integer, minimum: 1, nullable: true}
        startDate: {type: string, format: date}
        endDate: {type: string, format: date}
        createdAt: {type: string, format: date-time, readOnly: true}
        updatedAt: {type: string, format: date-time, readOnly: true}

    CampaignCreateDiscount:
      type: object
      required: [campaignName, campaignType, startDate, endDate, discountPercentage]
      properties:
        campaignName: {type: string}
        campaignType:
          $ref: '#/components/schemas/CampaignType'
        discountPercentage: {type: number, format: double, minimum: 0, maximum: 100}
        startDate: {type: string, format: date}
        endDate: {type: string, format: date}

    CampaignCreateBxgy:
      type: object
      required: [campaignName, campaignType, startDate, endDate, buyQty, getQty]
      properties:
        campaignName: {type: string}
        campaignType:
          $ref: '#/components/schemas/CampaignType'
        buyQty: {type: integer, minimum: 1}
        getQty: {type: integer, minimum: 1}
        startDate: {type: string, format: date}
        endDate: {type: string, format: date}

    CampaignCreate:
      oneOf:
        - $ref: '#/components/schemas/CampaignCreateDiscount'
        - $ref: '#/components/schemas/CampaignCreateBxgy'

    CampaignUpdate:
      allOf:
        - $ref: '#/components/schemas/CampaignCreate'

    PageCampaign:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Campaign'
        page:
          $ref: '#/components/schemas/PageMeta'

    CampaignAssignProductsRequest:
      type: object
      required: [productIds]
      properties:
        productIds:
          type: array
          items: {type: integer, format: int64}
          minItems: 1

    PageProductSummary:
      type: object
      properties:
        content:
          type: array
          items: {$ref: '#/components/schemas/ProductSummary'}
        page:
          $ref: '#/components/schemas/PageMeta'

    CustomerSpecialOffer:
      type: object
      required: [specialOfferId, customerId, percentOff, startDate, endDate]
      properties:
        specialOfferId: {type: integer, format: int64}
        customerId: {type: integer, format: int64}
        percentOff: {type: number, format: double, minimum: 0, maximum: 100}
        startDate: {type: string, format: date}
        endDate: {type: string, format: date}
        createdAt: {type: string, format: date-time, readOnly: true}
        updatedAt: {type: string, format: date-time, readOnly: true}

    CustomerSpecialOfferCreate:
      type: object
      required: [customerId, percentOff, startDate, endDate]
      properties:
        customerId: {type: integer, format: int64}
        percentOff: {type: number, format: double, minimum: 0, maximum: 100}
        startDate: {type: string, format: date}
        endDate: {type: string, format: date}

    CustomerSpecialOfferUpdate:
      allOf:
        - $ref: '#/components/schemas/CustomerSpecialOfferCreate'

    PageCustomerSpecialOffer:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CustomerSpecialOffer'
        page:
          $ref: '#/components/schemas/PageMeta'

    # -----------------------------
    # Purchase Orders & Items
    # -----------------------------
    PurchaseOrderStatus:
      type: string
      enum: [PLACED, IN_TRANSIT, RECEIVED, CANCELLED]

    PurchaseOrder:
      type: object
      required: [purchaseOrderId, supplierId, orderDate, status]
      properties:
        purchaseOrderId: {type: integer, format: int64}
        supplierId: {type: integer, format: int64}
        orderDate: {type: string, format: date}
        expectedDelivery: {type: string, format: date, nullable: true}
        actualDelivery: {type: string, format: date-time, nullable: true, readOnly: true}
        status: {$ref: '#/components/schemas/PurchaseOrderStatus'}
        createdAt: {type: string, format: date-time, readOnly: true}
        updatedAt: {type: string, format: date-time, readOnly: true}

    PurchaseOrderCreate:
      type: object
      required: [supplierId]
      properties:
        supplierId: {type: integer, format: int64}
        orderDate: {type: string, format: date, nullable: true}
        expectedDelivery: {type: string, format: date, nullable: true}

    PurchaseOrderUpdate:
      type: object
      properties:
        expectedDelivery: {type: string, format: date, nullable: true}
        status: {$ref: '#/components/schemas/PurchaseOrderStatus'}

    PagePurchaseOrder:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrder'
        page:
          $ref: '#/components/schemas/PageMeta'

    PurchaseOrderItem:
      type: object
      required: [purchaseOrderItemId, purchaseOrderId, productId, quantityOrdered, quantityReceived, unitPrice]
      properties:
        purchaseOrderItemId: {type: integer, format: int64}
        purchaseOrderId: {type: integer, format: int64}
        productId: {type: integer, format: int64}
        quantityOrdered: {type: number, format: double}
        quantityReceived: {type: number, format: double}
        unitPrice: {type: number, format: double}
        lineTotal: {type: number, format: double, readOnly: true}
        lineTotalReceived: {type: number, format: double, readOnly: true}
        createdAt: {type: string, format: date-time, readOnly: true}

    PurchaseOrderItemCreate:
      type: object
      required: [productId, quantityOrdered, unitPrice]
      properties:
        productId: {type: integer, format: int64}
        quantityOrdered: {type: number, format: double, minimum: 0.001}
        unitPrice: {type: number, format: double, minimum: 0}

    PurchaseOrderItemUpdate:
      type: object
      properties:
        quantityReceived: {type: number, format: double, minimum: 0}
        unitPrice: {type: number, format: double, minimum: 0}

    PagePurchaseOrderItem:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderItem'
        page:
          $ref: '#/components/schemas/PageMeta'

    # -----------------------------
    # Sales Orders & Items
    # -----------------------------
    SalesOrderStatus:
      type: string
      enum: [PENDING, ALLOCATED, IN_TRANSIT, DELIVERED, CANCELLED]

    SalesOrder:
      type: object
      required: [salesOrderId, customerId, orderDate, deliveryDate, status]
      properties:
        salesOrderId: {type: integer, format: int64}
        customerId: {type: integer, format: int64}
        orderDate: {type: string, format: date}
        deliveryDate: {type: string, format: date}
        deliveredAt: {type: string, format: date-time, nullable: true, readOnly: true}
        status: {$ref: '#/components/schemas/SalesOrderStatus'}
        customerSpecialOfferId: {type: integer, format: int64, nullable: true, readOnly: true}
        customerDiscountPctApplied: {type: number, format: double, minimum: 0, maximum: 100, nullable: true, readOnly: true}
        createdAt: {type: string, format: date-time, readOnly: true}
        updatedAt: {type: string, format: date-time, readOnly: true}

    SalesOrderCreate:
      type: object
      required: [customerId, deliveryDate]
      properties:
        customerId: {type: integer, format: int64}
        deliveryDate: {type: string, format: date}

    SalesOrderUpdate:
      type: object
      properties:
        deliveryDate: {type: string, format: date}
        status: {$ref: '#/components/schemas/SalesOrderStatus'}

    PageSalesOrder:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/SalesOrder'
        page:
          $ref: '#/components/schemas/PageMeta'

    SalesOrderItem:
      type: object
      required: [salesOrderItemId, salesOrderId, productId, quantity, unitPrice, discountPercentage]
      properties:
        salesOrderItemId: {type: integer, format: int64}
        salesOrderId: {type: integer, format: int64}
        productId: {type: integer, format: int64}
        quantity: {type: number, format: double}
        unitPrice: {type: number, format: double, readOnly: true}
        discountPercentage: {type: number, format: double, readOnly: true}
        campaignId: {type: integer, format: int64, nullable: true, readOnly: true, description: "Attribution to the product campaign active on orderDate (nullable)."}
        discountAmount: {type: number, format: double, readOnly: true}
        lineTotal: {type: number, format: double, readOnly: true}
        createdAt: {type: string, format: date-time, readOnly: true}

    SalesOrderItemCreate:
      type: object
      required: [productId, quantity]
      properties:
        productId: {type: integer, format: int64}
        quantity: {type: number, format: double, minimum: 0.001}

    SalesOrderItemUpdate:
      type: object
      properties:
        quantity: {type: number, format: double, minimum: 0.001}

    PageSalesOrderItem:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/SalesOrderItem'
        page:
          $ref: '#/components/schemas/PageMeta'

    # -----------------------------
    # Forecasting Views (V8/V9)
    # -----------------------------
    ForecastSalesRow:
      type: object
      description: Daily sales row aggregated by orderDate and product.
      properties:
        date: {type: string, format: date}
        productId: {type: integer, format: int64}
        salesUnits: {type: number, format: double}
        offerActiveShare:
          type: number
          format: double
          description: Unit-weighted share of units sold on orders with an active customer offer (0..1).
    ForecastPromoRow:
      type: object
      description: Daily effective promotion percent per product.
      properties:
        date: {type: string, format: date}
        productId: {type: integer, format: int64}
        promoPct:
          type: number
          format: double
          description: Effective product promotion percent (DISCOUNT or BXGY as 100*get/(buy+get)).

paths:
  # -----------------
  # Stock (V7)
  # -----------------
  /api/v1/stock-movements:
    get:
      tags: [Stock]
      summary: Retrieve paginated stock movements with filtering and sorting
      description: >-
        Returns a paginated list of stock movement audit rows. Supports multiple filter parameters that combine with AND logic.
        Repeatable parameters (product_id, movement_source, movement_kind) use OR logic within the same parameter type.
        Unknown query parameters result in HTTP 400. Default sort is movementDate,desc. Whitelisted sort fields: movementDate, createdAt, productId, movementSource, movementKind.
        Note: updated_after maps to createdAt.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/StockProductIdParam'
        - $ref: '#/components/parameters/MovementSourceParam'
        - $ref: '#/components/parameters/MovementKindParam'
        - $ref: '#/components/parameters/MovementDateGteParam'
        - $ref: '#/components/parameters/MovementDateLteParam'
        - $ref: '#/components/parameters/SourceIdParam'
        - $ref: '#/components/parameters/SourceItemIdParam'
        - $ref: '#/components/parameters/StockUpdatedAfterParam'
      responses:
        '200':
          description: Paged stock movements
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageStockMovement'
              examples:
                recent:
                  summary: "Recent movements"
                  value:
                    content:
                      - movementId: 9001
                        productId: 101
                        movementSource: PURCHASE_ORDER
                        movementKind: PURCHASE_RECEIPT
                        sourceId: 5001
                        sourceItemId: 70001
                        quantity: 10.000
                        movementDate: "2025-08-28T09:00:00Z"
                        createdAt: "2025-08-28T09:00:01Z"
                      - movementId: 9002
                        productId: 101
                        movementSource: SALES_ORDER
                        movementKind: SALE_SHIPMENT
                        sourceId: 6001
                        sourceItemId: 80001
                        quantity: 2.000
                        movementDate: "2025-08-28T10:30:00Z"
                        createdAt: "2025-08-28T10:30:02Z"
                    page:
                      page: 0
                      size: 20
                      totalElements: 2
                      totalPages: 1
        '400':
          description: Invalid or unknown parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # -----------------
  # Reporting (V8 views)
  # -----------------
  /api/v1/reporting/product-day-sales:
    get:
      tags: [Reporting]
      summary: Daily product sales (orderDate-based)
      description: >-
        Returns aggregated daily sales by orderDate and product. Uses only orders with status=DELIVERED.
        Includes unit-weighted offerActiveShare (0..1). No pagination for PoC; callers must pass a bounded date range. Results are ordered by date ASC, then productId ASC.
      parameters:
        - $ref: '#/components/parameters/ForecastFromParam'
        - $ref: '#/components/parameters/ForecastToParam'
        - $ref: '#/components/parameters/ForecastProductIdParam'
      responses:
        '200':
          description: Array of daily sales rows
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/ForecastSalesRow'}
              examples:
                sample:
                  summary: Sample daily sales rows
                  value:
                    - date: '2025-07-01'
                      productId: 1001
                      salesUnits: 6.0
                      offerActiveShare: 0.00
                    - date: '2025-07-01'
                      productId: 1008
                      salesUnits: 42.0
                      offerActiveShare: 0.15
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/reporting/product-day-promo:
    get:
      tags: [Reporting]
      summary: Daily product promotion percent
      description: >-
        Returns effective product promotion percent per day (DISCOUNT or BXGY as 100*get/(buy+get)) for products with active campaigns. No pagination for PoC; callers must pass a bounded date range. Results are ordered by date ASC, then productId ASC.
      parameters:
        - $ref: '#/components/parameters/ForecastFromParam'
        - $ref: '#/components/parameters/ForecastToParam'
        - $ref: '#/components/parameters/ForecastProductIdParam'
      responses:
        '200':
          description: Array of daily promotion rows
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/ForecastPromoRow'}
              examples:
                sample:
                  summary: Sample daily promo rows
                  value:
                    - date: '2025-07-01'
                      productId: 1001
                      promoPct: 0.00
                    - date: '2025-07-01'
                      productId: 1008
                      promoPct: 33.33
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/products/{productId}/stock-movements:
    get:
      tags: [Stock]
      summary: List stock movements for a product (paged)
      description: >-
        Returns stock movements for the specified product together with filtering and sorting. Do not pass product_id in query (conflicts with path). Unknown parameters result in 400.
        Default sort is movementDate,desc. Sorting whitelist: movementDate, createdAt, productId, movementSource, movementKind.
        Note: updated_after maps to createdAt.
      parameters:
        - in: path
          name: productId
          required: true
          schema: {type: integer, format: int64}
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/MovementSourceParam'
        - $ref: '#/components/parameters/MovementKindParam'
        - $ref: '#/components/parameters/MovementDateGteParam'
        - $ref: '#/components/parameters/MovementDateLteParam'
        - $ref: '#/components/parameters/SourceIdParam'
        - $ref: '#/components/parameters/SourceItemIdParam'
        - $ref: '#/components/parameters/StockUpdatedAfterParam'
      responses:
        '200':
          description: Paged stock movements for the product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageStockMovement'
              examples:
                productTimeline:
                  summary: "Movements for a single product"
                  value:
                    content:
                      - movementId: 9201
                        productId: 101
                        movementSource: PURCHASE_ORDER
                        movementKind: PURCHASE_RECEIPT
                        sourceId: 5002
                        sourceItemId: 70002
                        quantity: 5.000
                        movementDate: "2025-08-27T12:00:00Z"
                        createdAt: "2025-08-27T12:00:01Z"
                    page:
                      page: 0
                      size: 20
                      totalElements: 1
                      totalPages: 1
        '400':
          description: Invalid or unknown parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/current-stock:
    get:
      tags: [Stock]
      summary: Retrieve paginated current stock snapshot with filtering and sorting
      description: >-
        Returns a paginated list of current stock rows. Supports multiple filters with AND logic, repeatable product_id with OR logic.
        Unknown parameters result in 400. Default sort is quantityAvailable,asc. Whitelisted sort fields: quantityAvailable, quantityOnHand, lastUpdated, productId.
        Note: updated_after maps to lastUpdated.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/StockProductIdParam'
        - $ref: '#/components/parameters/CurrentStockAvailableGteParam'
        - $ref: '#/components/parameters/CurrentStockAvailableLteParam'
        - $ref: '#/components/parameters/CurrentStockOnHandGteParam'
        - $ref: '#/components/parameters/CurrentStockOnHandLteParam'
        - $ref: '#/components/parameters/StockUpdatedAfterParam'
      responses:
        '200':
          description: Paged current stock rows
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCurrentStock'
              examples:
                lowStockFirst:
                  summary: "Low stock shown first"
                  value:
                    content:
                      - productId: 101
                        quantityOnHand: 3.000
                        quantityReserved: 3.000
                        quantityAvailable: 0.000
                        lastMovementId: 9003
                        lastUpdated: "2025-08-28T10:00:00Z"
                    page:
                      page: 0
                      size: 20
                      totalElements: 1
                      totalPages: 1
        '400':
          description: Invalid or unknown parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/products/{productId}/stock:
    get:
      tags: [Stock]
      summary: Retrieve current stock snapshot for a product
      parameters:
        - in: path
          name: productId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentStock'
              examples:
                snapshot:
                  summary: "Snapshot for a product"
                  value:
                    productId: 101
                    quantityOnHand: 12.000
                    quantityReserved: 3.000
                    quantityAvailable: 9.000
                    lastMovementId: 9300
                    lastUpdated: "2025-08-28T12:00:00Z"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/stock-movements/adjustments:
    post:
      tags: [Stock]
      summary: Create an adjustment stock movement
      description: >-
        Creates a stock adjustment movement. Only ADJUSTMENT_IN and ADJUSTMENT_OUT are allowed. Server posts the movement and updates the snapshot in one transaction.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockAdjustmentCreate'
            examples:
              adjustmentOut:
                summary: "Decrease on-hand via adjustment"
                value:
                  productId: 101
                  movementKind: ADJUSTMENT_OUT
                  quantity: 1.000
                  movementDate: "2025-08-28T11:00:00Z"
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URL of the created stock movement
              schema:
                type: string
                format: uri
                example: "/api/v1/stock-movements/123"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockMovement'
              examples:
                created:
                  summary: "Adjustment created"
                  value:
                    movementId: 9100
                    productId: 101
                    movementSource: ADJUSTMENT
                    movementKind: ADJUSTMENT_OUT
                    sourceId: null
                    sourceItemId: null
                    quantity: 1.000
                    movementDate: "2025-08-28T11:00:00Z"
                    createdAt: "2025-08-28T11:00:01Z"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: State conflict (e.g., INSUFFICIENT_AVAILABLE or MOVEMENT_ALREADY_POSTED)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                insufficientAvailable:
                  summary: "Insufficient available quantity"
                  value:
                    status: 409
                    error: "Conflict"
                    code: "INSUFFICIENT_AVAILABLE"
                    message: "Insufficient available quantity to adjust"
                    path: "/api/v1/stock-movements/adjustments"
                    timestamp: "2025-08-28T11:05:00Z"
                    details:
                      productId: 101
                      available: 2.000
                      requested: 5.000
                movementAlreadyPosted:
                  summary: "Duplicate movement for source line"
                  value:
                    status: 409
                    error: "Conflict"
                    code: "MOVEMENT_ALREADY_POSTED"
                    message: "Movement already posted for this source line"
                    path: "/api/v1/stock-movements/adjustments"
                    timestamp: "2025-08-28T11:06:00Z"
                    details:
                      movementSource: "PURCHASE_ORDER"
                      sourceItemId: 70002
  # -----------------
  # Product-Suppliers
  # -----------------
  /api/v1/product-suppliers:
    get:
      tags: [ProductSuppliers]
      summary: Retrieve paginated product-supplier links with filtering and sorting
      description: >-
        Returns a paginated list of product-supplier links. Supports multiple filter parameters
        that combine with AND logic. Repeatable parameters (product_id, supplier_id) use OR logic
        within the same parameter. Unknown query parameters will result in HTTP 400.
        Default sort is by updatedAt descending. If 'active' is omitted, both active and inactive records are returned.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/ProductSupplierProductIdParam'
        - $ref: '#/components/parameters/ProductSupplierSupplierIdParam'
        - $ref: '#/components/parameters/ProductSupplierActiveParam'
        - $ref: '#/components/parameters/ProductSupplierPreferredParam'
        - $ref: '#/components/parameters/ProductSupplierLastDeliverySinceParam'
        - $ref: '#/components/parameters/UpdatedAfterParam'
      responses:
        '200':
          description: Paged links matching filter criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageProductSupplierLink'
        '400':
          description: Invalid or unknown filter parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                paginationWindowExceeded:
                  $ref: '#/components/examples/PaginationWindowExceeded'
    post:
      tags: [ProductSuppliers]
      summary: Create a product-supplier link
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductSupplierCreate'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URL of the created link
              schema:
                type: string
                format: uri
                example: "/api/v1/product-suppliers/123"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSupplierLink'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict (duplicate pair or preferred constraint violation)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                duplicateLink:
                  summary: "Duplicate product-supplier pair"
                  value:
                    status: 409
                    error: "Conflict"
                    code: "DUPLICATE_LINK"
                    message: "Product-supplier link already exists"
                    path: "/api/v1/product-suppliers"
                    timestamp: "2025-08-28T10:10:00Z"
                    details:
                      productId: 101
                      supplierId: 11
                preferredConflictOnCreate:
                  summary: "Another preferred supplier exists for product"
                  value:
                    status: 409
                    error: "Conflict"
                    code: "PREFERRED_CONFLICT"
                    message: "Only one preferred supplier allowed per product"
                    path: "/api/v1/product-suppliers"
                    timestamp: "2025-08-28T10:12:00Z"
                    details:
                      productId: 101
                      existingPreferredSupplierId: 12
  /api/v1/product-suppliers/{productSupplierId}:
    get:
      tags: [ProductSuppliers]
      summary: Retrieve a specific product-supplier link
      parameters:
        - in: path
          name: productSupplierId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSupplierLink'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [ProductSuppliers]
      summary: Update fields of a product-supplier link
      parameters:
        - in: path
          name: productSupplierId
          required: true
          schema: {type: integer, format: int64}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductSupplierUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSupplierLink'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Preferred constraint violation (PREFERRED_CONFLICT)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                preferredConflictOnUpdate:
                  summary: "Cannot set preferred; another preferred exists"
                  value:
                    status: 409
                    error: "Conflict"
                    code: "PREFERRED_CONFLICT"
                    message: "Only one preferred supplier allowed per product"
                    path: "/api/v1/product-suppliers/{productSupplierId}"
                    timestamp: "2025-08-28T10:15:00Z"
                    details:
                      productId: 101
                      existingPreferredSupplierId: 12
    delete:
      tags: [ProductSuppliers]
      summary: Permanently remove a product-supplier link
      parameters:
        - in: path
          name: productSupplierId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '204': {description: Deleted}
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/products/{productId}/suppliers:
    get:
      tags: [ProductSuppliers]
      summary: List suppliers for a product with link details (read-only projection)
      description: >-
        Returns suppliers for the specified product together with link details. Do not pass product_id
        in query (conflicts with path). Unknown parameters result in 400. Default sort is updatedAt,desc.
        Sorting whitelist for this view: supplierName, city, isPreferred, active, lastDeliveryDate, updatedAt.
        If the productId does not exist, returns 404.
      parameters:
        - in: path
          name: productId
          required: true
          schema: {type: integer, format: int64}
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/ProductSupplierActiveParam'
        - $ref: '#/components/parameters/ProductSupplierPreferredParam'
        - $ref: '#/components/parameters/ProductSupplierLastDeliverySinceParam'
        - $ref: '#/components/parameters/UpdatedAfterParam'
      responses:
        '200':
          description: Paged suppliers for the product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageProductSupplierWithSupplier'
        '400':
          description: Invalid or unknown parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                paginationWindowExceeded:
                  $ref: '#/components/examples/PaginationWindowExceeded'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/suppliers/{supplierId}/products:
    get:
      tags: [ProductSuppliers]
      summary: List products for a supplier with link details (read-only projection)
      description: >-
        Returns products for the specified supplier together with link details. Do not pass supplier_id
        in query (conflicts with path). Unknown parameters result in 400. Default sort is updatedAt,desc.
        Sorting whitelist for this view: productName, category, isPreferred, active, lastDeliveryDate, updatedAt.
        If the supplierId does not exist, returns 404.
      parameters:
        - in: path
          name: supplierId
          required: true
          schema: {type: integer, format: int64}
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/ProductSupplierActiveParam'
        - $ref: '#/components/parameters/ProductSupplierPreferredParam'
        - $ref: '#/components/parameters/ProductSupplierLastDeliverySinceParam'
        - $ref: '#/components/parameters/UpdatedAfterParam'
      responses:
        '200':
          description: Paged products for the supplier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageProductSupplierWithProduct'
        '400':
          description: Invalid or unknown parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                paginationWindowExceeded:
                  $ref: '#/components/examples/PaginationWindowExceeded'
        '404':
          description: Supplier not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  # -----------------
  # Products
  # -----------------
  /api/v1/products:
    get:
      tags: [Products]
      summary: Retrieve paginated list of products with filtering and sorting
      description: >-
        Returns a paginated list of lightweight product rows for the list view
        (soft-deleted rows are excluded by default; use include_deleted=true to include).
        Each row includes inventory snapshot and supplier info suitable for the grid
        (active suppliers and the preferred supplier if any). Supports multiple
        filter parameters that combine with AND logic. Repeatable parameters
        (category, uom) use OR logic within the same parameter type. Unknown query
        parameters will result in HTTP 400. Default sort is by productName ascending.
        Whitelisted sort fields: productName, category, currentPrice, updatedAt.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/QueryParam'
        - $ref: '#/components/parameters/CategoryParam'
        - $ref: '#/components/parameters/UomParam'
        - $ref: '#/components/parameters/PriceGteParam'
        - $ref: '#/components/parameters/PriceLteParam'
        - $ref: '#/components/parameters/SafetyGteParam'
        - $ref: '#/components/parameters/SafetyLteParam'
        - $ref: '#/components/parameters/ReorderGteParam'
        - $ref: '#/components/parameters/ReorderLteParam'
        - $ref: '#/components/parameters/UpdatedAfterParam'
        - $ref: '#/components/parameters/IncludeDeletedParam'
      responses:
        '200':
          description: Paged product list items matching filter criteria
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/PageProductListItem'
              examples:
                filtered:
                  summary: "Filtered list items example"
                  value:
                    content:
                      - productId: 101
                        productName: "Bananas"
                        category: "Fruits"
                        unitOfMeasure: "kg"
                        quantityAvailable: 12.000
                        activeSuppliers:
                          - supplierId: 11
                            supplierName: "Acme Foods Ltd"
                          - supplierId: 12
                            supplierName: "Green Valley"
                        preferredSupplier:
                          supplierId: 11
                          supplierName: "Acme Foods Ltd"
                        inventoryStatus: "GREEN"
                      - productId: 102
                        productName: "Strawberries"
                        category: "Fruits"
                        unitOfMeasure: "kg"
                        quantityAvailable: 5.000
                        activeSuppliers:
                          - supplierId: 13
                            supplierName: "Berry Co"
                        preferredSupplier: null
                        inventoryStatus: "YELLOW"
                    page:
                      page: 0
                      size: 20
                      totalElements: 2
                      totalPages: 1
        '400':
          description: Invalid filter parameters or validation error
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                unknownParam:
                  summary: "Unknown parameter error"
                  value:
                    status: 400
                    error: "Bad Request"
                    message: "Unknown query parameters: categor_y"
                    path: "/api/v1/products"
                    timestamp: "2025-08-28T10:00:00Z"
                    details: {}
                rangeError:
                  summary: "Invalid range error"
                  value:
                    status: 400
                    error: "Bad Request"
                    message: "price_gte cannot be greater than price_lte"
                    path: "/api/v1/products"
                    timestamp: "2025-08-28T10:00:00Z"
                paginationWindowExceeded:
                  $ref: '#/components/examples/PaginationWindowExceeded'
    
    post:
      tags: [Products]
      summary: Create a new product with required fields
      requestBody:
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/ProductCreate'
      responses:
        '201':
          description: Created
          headers:
            Location: 
              description: "URL of the created product"
              schema: 
                type: string
                format: uri
                example: "/api/v1/products/123"
          content:
            application/json: 
              schema: 
                $ref: '#/components/schemas/Product'
        '400': 
          description: Invalid input
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
  
  /api/v1/products/{productId}:
    get:
      tags: [Products]
      summary: Retrieve detailed information for a specific product
      description: Returns 404 if the product is soft-deleted.
      parameters: 
        - in: path
          name: productId
          required: true
          schema: 
            type: integer
            format: int64
      responses:
        '200': 
          description: OK
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Product'
        '404': 
          description: Not found
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
    
    put:
      tags: [Products]
      summary: Update product with all required fields
      parameters: 
        - in: path
          name: productId
          required: true
          schema: 
            type: integer
            format: int64
      requestBody:
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/ProductUpdate'
      responses:
        '200': 
          description: Updated
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Product'
        '400': 
          description: Invalid input
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '404': 
          description: Not found
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
    
    delete:
      tags: [Products]
      summary: Delete a product (soft delete by default; hard delete if never used)
      description: >-
        Performs a soft delete by setting deletedAt. If the product has never been referenced
        (no stock movements and no PO/SO items), the service may hard-delete it. Subsequent reads
        exclude soft-deleted products unless include_deleted=true is provided on list endpoints.
      parameters: 
        - in: path
          name: productId
          required: true
          schema: 
            type: integer
            format: int64
      responses:
        '204': 
          description: Deleted
        '404': 
          description: Not found
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'

  # -----------------
  # Suppliers
  # -----------------
  /api/v1/suppliers:
    get:
      tags: [Suppliers]
      summary: Retrieve paginated list of suppliers with filtering and sorting
      description: >-
        Returns a paginated list of suppliers (soft-deleted rows are excluded by default; use include_deleted=true to include).
        Supports multiple filter parameters that combine with AND logic.
        City parameter can be repeated for OR logic. Unknown query parameters will result in HTTP 400.
        Default sort is by supplierName ascending. Whitelisted sort fields: supplierName, updatedAt.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/QueryParam'
        - $ref: '#/components/parameters/CityParam'
        - $ref: '#/components/parameters/UpdatedAfterParam'
        - $ref: '#/components/parameters/IncludeDeletedParam'
      responses:
        '200':
          description: Paged suppliers matching filter criteria
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/PageSupplier'
        '400':
          description: Invalid filter parameters or validation error
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                paginationWindowExceeded:
                  $ref: '#/components/examples/PaginationWindowExceeded'
    
    post:
      tags: [Suppliers]
      summary: Register a new supplier with required fields
      requestBody:
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/SupplierCreate'
      responses:
        '201':
          description: Created
          headers:
            Location: 
              description: "URL of the created supplier"
              schema: 
                type: string
                format: uri
                example: "/api/v1/suppliers/456"
          content:
            application/json: 
              schema: 
                $ref: '#/components/schemas/Supplier'
        '400': 
          description: Invalid input
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '409': 
          description: Duplicate email
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                duplicateSupplierEmail:
                  summary: "Supplier email already in use"
                  value:
                    status: 409
                    error: "Conflict"
                    code: "DUPLICATE_EMAIL"
                    message: "Email is already used by another active supplier"
                    path: "/api/v1/suppliers"
                    timestamp: "2025-08-28T10:45:00Z"
                    details:
                      email: "contact@acmefoods.com"
  
  /api/v1/suppliers/{supplierId}:
    get:
      tags: [Suppliers]
      summary: Retrieve detailed information for a specific supplier
      description: Returns 404 if the supplier is soft-deleted.
      parameters: 
        - in: path
          name: supplierId
          required: true
          schema: 
            type: integer
            format: int64
      responses:
        '200': 
          description: OK
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Supplier'
        '404': 
          description: Not found
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
    
    put:
      tags: [Suppliers]
      summary: Update supplier with all required fields
      parameters: 
        - in: path
          name: supplierId
          required: true
          schema: 
            type: integer
            format: int64
      requestBody:
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/SupplierUpdate'
      responses:
        '200': 
          description: Updated
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Supplier'
        '400': 
          description: Invalid input
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '404': 
          description: Not found
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '409': 
          description: Duplicate email
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                duplicateSupplierEmailOnUpdate:
                  summary: "Email collides with another supplier"
                  value:
                    status: 409
                    error: "Conflict"
                    code: "DUPLICATE_EMAIL"
                    message: "Email is already used by another active supplier"
                    path: "/api/v1/suppliers/{supplierId}"
                    timestamp: "2025-08-28T10:46:00Z"
                    details:
                      email: "contact@acmefoods.com"
    
    delete:
      tags: [Suppliers]
      summary: Delete a supplier (soft delete by default; hard delete if never used)
      description: >-
        Performs a soft delete by setting deletedAt. If the supplier has never been referenced
        (no purchase orders), the service may hard-delete it. Subsequent reads exclude soft-deleted
        suppliers unless include_deleted=true is provided on list endpoints.
      parameters: 
        - in: path
          name: supplierId
          required: true
          schema: 
            type: integer
            format: int64
      responses:
        '204': 
          description: Deleted
        '404': 
          description: Not found
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'

  # -----------------
  # Customers
  # -----------------
  /api/v1/customers:
    get:
      tags: [Customers]
      summary: Retrieve paginated list of customers with filtering and sorting
      description: >-
        Returns a paginated list of customers (soft-deleted rows are excluded by default; use include_deleted=true to include).
        Supports multiple filter parameters that combine with AND logic.
        City and segment parameters can be repeated for OR logic. Unknown query parameters will result in HTTP 400.
        Default sort is by customerName ascending. Whitelisted sort fields: customerName, updatedAt.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/QueryParam'
        - $ref: '#/components/parameters/SegmentParam'
        - $ref: '#/components/parameters/CityParam'
        - $ref: '#/components/parameters/UpdatedAfterParam'
        - $ref: '#/components/parameters/IncludeDeletedParam'
      responses:
        '200':
          description: Paged customers matching filter criteria
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/PageCustomer'
        '400':
          description: Invalid filter parameters or validation error
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                paginationWindowExceeded:
                  $ref: '#/components/examples/PaginationWindowExceeded'
    post:
      tags: [Customers]
      summary: Register a new customer with required fields
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCreate'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: "URL of the created customer"
              schema:
                type: string
                format: uri
                example: "/api/v1/customers/789"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Duplicate email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                duplicateCustomerEmail:
                  summary: "Customer email already in use"
                  value:
                    status: 409
                    error: "Conflict"
                    code: "DUPLICATE_EMAIL"
                    message: "Email is already used by another active customer"
                    path: "/api/v1/customers"
                    timestamp: "2025-08-28T10:47:00Z"
                    details:
                      email: "orders@bluemart.com"

  # -----------------
  # Campaigns
  # -----------------
  /api/v1/campaigns:
    get:
      tags: [Campaigns]
      summary: Retrieve paginated list of campaigns with filtering and sorting
      description: >-
        Returns a paginated list of campaigns. Unknown query parameters will result in HTTP 400.
        Default sort is updatedAt,desc. Whitelisted sort fields: campaignName, campaignType, startDate, endDate, updatedAt.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/QueryParam'
        - $ref: '#/components/parameters/CampaignTypeParam'
        - $ref: '#/components/parameters/CampaignStartGteParam'
        - $ref: '#/components/parameters/CampaignStartLteParam'
        - $ref: '#/components/parameters/CampaignEndGteParam'
        - $ref: '#/components/parameters/CampaignEndLteParam'
        - $ref: '#/components/parameters/CampaignActiveOnParam'
        - $ref: '#/components/parameters/UpdatedAfterParam'
      responses:
        '200':
          description: Paged campaigns matching filter criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCampaign'
        '400':
          description: Invalid filter parameters or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                paginationWindowExceeded:
                  $ref: '#/components/examples/PaginationWindowExceeded'
    post:
      tags: [Campaigns]
      summary: Create a campaign
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignCreate'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URL of the created campaign
              schema:
                type: string
                format: uri
                example: "/api/v1/campaigns/123"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict (e.g., overlapping assignments if provided)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                overlapConflictOnCreate:
                  summary: "Campaign window overlaps"
                  value:
                    status: 409
                    error: "Conflict"
                    code: "OVERLAP_CONFLICT"
                    message: "Campaign window overlaps with existing campaign(s)"
                    path: "/api/v1/campaigns"
                    timestamp: "2025-08-28T10:20:00Z"
                    details:
                      overlappingCampaignIds: [1990, 1995]

  /api/v1/campaigns/{campaignId}:
    get:
      tags: [Campaigns]
      summary: Retrieve a specific campaign
      parameters:
        - in: path
          name: campaignId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [Campaigns]
      summary: Update a campaign
      parameters:
        - in: path
          name: campaignId
          required: true
          schema: {type: integer, format: int64}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict (e.g., overlapping window with assignments)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                overlapConflictOnUpdate:
                  summary: "Updated window overlaps with assignments"
                  value:
                    status: 409
                    error: "Conflict"
                    code: "OVERLAP_CONFLICT"
                    message: "Campaign window overlaps with existing campaign(s)"
                    path: "/api/v1/campaigns/{campaignId}"
                    timestamp: "2025-08-28T10:22:00Z"
                    details:
                      overlappingCampaignIds: [1990]
    delete:
      tags: [Campaigns]
      summary: Delete a campaign
      parameters:
        - in: path
          name: campaignId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '204': {description: Deleted}
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict (e.g., deletion blocked by service rules)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/campaigns/{campaignId}/products:
    get:
      tags: [Campaigns]
      summary: List products assigned to a campaign (paged)
      parameters:
        - in: path
          name: campaignId
          required: true
          schema: {type: integer, format: int64}
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        '200':
          description: Paged products for the campaign
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageProductSummary'
        '404':
          description: Campaign not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags: [Campaigns]
      summary: Assign products to a campaign (batch)
      parameters:
        - in: path
          name: campaignId
          required: true
          schema: {type: integer, format: int64}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignAssignProductsRequest'
      responses:
        '204': {description: Assigned}
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Campaign or product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Overlapping campaign window for one or more products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                overlapConflictOnAssignBatch:
                  summary: "Some products already in overlapping campaigns"
                  value:
                    status: 409
                    error: "Conflict"
                    code: "OVERLAP_CONFLICT"
                    message: "Assignment overlaps with existing campaign(s)"
                    path: "/api/v1/campaigns/{campaignId}/products"
                    timestamp: "2025-08-28T10:24:00Z"
                    details:
                      productIds: [101, 102]

  /api/v1/campaigns/{campaignId}/products/{productId}:
    post:
      tags: [Campaigns]
      summary: Assign a product to a campaign
      parameters:
        - in: path
          name: campaignId
          required: true
          schema: {type: integer, format: int64}
        - in: path
          name: productId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '204': {description: Assigned}
        '404':
          description: Campaign or product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Overlapping campaign window
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                overlapConflictOnAssignSingle:
                  summary: "Product already in overlapping campaign"
                  value:
                    status: 409
                    error: "Conflict"
                    code: "OVERLAP_CONFLICT"
                    message: "Assignment overlaps with existing campaign(s)"
                    path: "/api/v1/campaigns/{campaignId}/products/{productId}"
                    timestamp: "2025-08-28T10:25:00Z"
                    details:
                      productId: 101
    delete:
      tags: [Campaigns]
      summary: Remove a product from a campaign
      parameters:
        - in: path
          name: campaignId
          required: true
          schema: {type: integer, format: int64}
        - in: path
          name: productId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '204': {description: Removed}
        '404':
          description: Campaign or product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # -----------------
  # Customer Special Offers
  # -----------------
  /api/v1/customer-special-offers:
    get:
      tags: [CustomerSpecialOffers]
      summary: Retrieve paginated list of customer special offers with filtering and sorting
      description: >-
        Unknown query parameters will result in HTTP 400. Default sort is updatedAt,desc.
        Whitelisted sort fields: customerId, percentOff, startDate, endDate, updatedAt.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/CSOCustomerIdParam'
        - $ref: '#/components/parameters/CSOPercentGteParam'
        - $ref: '#/components/parameters/CSOPercentLteParam'
        - $ref: '#/components/parameters/CSOStartGteParam'
        - $ref: '#/components/parameters/CSOStartLteParam'
        - $ref: '#/components/parameters/CSOEndGteParam'
        - $ref: '#/components/parameters/CSOEndLteParam'
        - $ref: '#/components/parameters/CSOActiveOnParam'
        - $ref: '#/components/parameters/UpdatedAfterParam'
      responses:
        '200':
          description: Paged offers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCustomerSpecialOffer'
        '400':
          description: Invalid or unknown parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                paginationWindowExceeded:
                  $ref: '#/components/examples/PaginationWindowExceeded'
    post:
      tags: [CustomerSpecialOffers]
      summary: Create a customer special offer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerSpecialOfferCreate'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URL of the created offer
              schema:
                type: string
                format: uri
                example: "/api/v1/customer-special-offers/123"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSpecialOffer'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Offer conflict (one active per customer)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                offerConflictOnCreate:
                  summary: "Customer already has an active offer"
                  value:
                    status: 409
                    error: "Conflict"
                    code: "OFFER_CONFLICT"
                    message: "One active offer allowed per customer"
                    path: "/api/v1/customer-special-offers"
                    timestamp: "2025-08-28T10:30:00Z"
                    details:
                      customerId: 501

  /api/v1/customer-special-offers/{specialOfferId}:
    get:
      tags: [CustomerSpecialOffers]
      summary: Retrieve a specific offer
      parameters:
        - in: path
          name: specialOfferId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSpecialOffer'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [CustomerSpecialOffers]
      summary: Update a customer special offer
      parameters:
        - in: path
          name: specialOfferId
          required: true
          schema: {type: integer, format: int64}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerSpecialOfferUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSpecialOffer'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Offer conflict (one active per customer)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                offerConflictOnUpdate:
                  summary: "Updated window overlaps with an active offer"
                  value:
                    status: 409
                    error: "Conflict"
                    code: "OFFER_CONFLICT"
                    message: "One active offer allowed per customer"
                    path: "/api/v1/customer-special-offers/{specialOfferId}"
                    timestamp: "2025-08-28T10:32:00Z"
                    details:
                      customerId: 501
    delete:
      tags: [CustomerSpecialOffers]
      summary: Delete an offer
      parameters:
        - in: path
          name: specialOfferId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '204': {description: Deleted}
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/customers/{customerId}/special-offers:
    get:
      tags: [CustomerSpecialOffers]
      summary: List offers for a customer (paged)
      parameters:
        - in: path
          name: customerId
          required: true
          schema: {type: integer, format: int64}
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/UpdatedAfterParam'
      responses:
        '200':
          description: Paged offers for the customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCustomerSpecialOffer'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # -----------------
  # Purchase Orders
  # -----------------
  /api/v1/purchase-orders:
    get:
      tags: [PurchaseOrders]
      summary: Retrieve paginated list of purchase orders with filtering and sorting
      description: >-
        Unknown query parameters will result in HTTP 400. Default sort is updatedAt,desc.
        Whitelisted sort fields: orderDate, expectedDelivery, status, updatedAt.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PurchaseOrderSupplierIdParam'
        - $ref: '#/components/parameters/PurchaseOrderStatusParam'
        - $ref: '#/components/parameters/PurchaseOrderOrderDateGteParam'
        - $ref: '#/components/parameters/PurchaseOrderOrderDateLteParam'
        - $ref: '#/components/parameters/PurchaseOrderEtaGteParam'
        - $ref: '#/components/parameters/PurchaseOrderEtaLteParam'
        - $ref: '#/components/parameters/PurchaseOrderReceivedSinceParam'
        - $ref: '#/components/parameters/UpdatedAfterParam'
      responses:
        '200':
          description: Paged purchase orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagePurchaseOrder'
        '400':
          description: Invalid or unknown parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                paginationWindowExceeded:
                  $ref: '#/components/examples/PaginationWindowExceeded'
    post:
      tags: [PurchaseOrders]
      summary: Create a purchase order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseOrderCreate'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URL of the created purchase order
              schema:
                type: string
                format: uri
                example: "/api/v1/purchase-orders/123"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseOrder'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/purchase-orders/{purchaseOrderId}:
    get:
      tags: [PurchaseOrders]
      summary: Retrieve a specific purchase order
      parameters:
        - in: path
          name: purchaseOrderId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseOrder'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [PurchaseOrders]
      summary: Update a purchase order
      parameters:
        - in: path
          name: purchaseOrderId
          required: true
          schema: {type: integer, format: int64}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseOrderUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseOrder'
        '400':
          description: Invalid input or invalid state transitions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: State conflict (e.g., cancelling with received quantity)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                poStateConflict:
                  summary: "Cannot cancel; items already received"
                  value:
                    status: 409
                    error: "Conflict"
                    code: "PO_STATE_CONFLICT"
                    message: "Invalid transition for current received quantities"
                    path: "/api/v1/purchase-orders/{purchaseOrderId}"
                    timestamp: "2025-08-28T10:35:00Z"
                    details:
                      purchaseOrderId: 5002
                      receivedItemsCount: 2
    delete:
      tags: [PurchaseOrders]
      summary: Delete a purchase order
      parameters:
        - in: path
          name: purchaseOrderId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '204': {description: Deleted}
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: State conflict (blocked by service rules)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                poDeleteConflict:
                  summary: "Cannot delete; items already received"
                  value:
                    status: 409
                    error: "Conflict"
                    code: "PO_STATE_CONFLICT"
                    message: "Cannot delete purchase order with received items"
                    path: "/api/v1/purchase-orders/{purchaseOrderId}"
                    timestamp: "2025-08-28T10:36:00Z"
                    details:
                      purchaseOrderId: 5002
                      receivedItemsCount: 2

  /api/v1/purchase-orders/{purchaseOrderId}/items:
    get:
      tags: [PurchaseOrderItems]
      summary: List items for a purchase order (paged)
      parameters:
        - in: path
          name: purchaseOrderId
          required: true
          schema: {type: integer, format: int64}
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        '200':
          description: Paged items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagePurchaseOrderItem'
        '404':
          description: Purchase order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags: [PurchaseOrderItems]
      summary: Add an item to a purchase order
      parameters:
        - in: path
          name: purchaseOrderId
          required: true
          schema: {type: integer, format: int64}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseOrderItemCreate'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URL of the created item
              schema:
                type: string
                format: uri
                example: "/api/v1/purchase-order-items/456"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseOrderItem'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Purchase order or product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Duplicate item (same product per purchase order)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/purchase-order-items/{purchaseOrderItemId}:
    get:
      tags: [PurchaseOrderItems]
      summary: Retrieve a purchase order item
      parameters:
        - in: path
          name: purchaseOrderItemId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseOrderItem'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [PurchaseOrderItems]
      summary: Update a purchase order item
      description: >-
        Editable fields: quantityReceived and unitPrice. Service rejects unitPrice changes after any quantityReceived > 0.
      parameters:
        - in: path
          name: purchaseOrderItemId
          required: true
          schema: {type: integer, format: int64}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseOrderItemUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseOrderItem'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: State conflict (cannot change unitPrice after any quantityReceived > 0)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [PurchaseOrderItems]
      summary: Delete a purchase order item
      parameters:
        - in: path
          name: purchaseOrderItemId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '204': {description: Deleted}
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # -----------------
  # Sales Orders
  # -----------------
  /api/v1/sales-orders:
    get:
      tags: [SalesOrders]
      summary: Retrieve paginated list of sales orders with filtering and sorting
      description: >-
        Returns a paginated list of sales orders. Unknown query parameters will result in HTTP 400.
        Default sort is updatedAt,desc. Whitelisted sort fields: orderDate, deliveryDate, status, updatedAt.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/SalesOrderCustomerIdParam'
        - $ref: '#/components/parameters/SalesOrderStatusParam'
        - $ref: '#/components/parameters/SalesOrderOrderDateGteParam'
        - $ref: '#/components/parameters/SalesOrderOrderDateLteParam'
        - $ref: '#/components/parameters/SalesOrderDeliveryDateGteParam'
        - $ref: '#/components/parameters/SalesOrderDeliveryDateLteParam'
        - $ref: '#/components/parameters/SalesOrderDeliveredSinceParam'
        - $ref: '#/components/parameters/UpdatedAfterParam'
      responses:
        '200':
          description: Paged sales orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageSalesOrder'
        '400':
          description: Invalid or unknown parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                paginationWindowExceeded:
                  $ref: '#/components/examples/PaginationWindowExceeded'
    post:
      tags: [SalesOrders]
      summary: Create a sales order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderCreate'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URL of the created sales order
              schema:
                type: string
                format: uri
                example: "/api/v1/sales-orders/123"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesOrder'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/sales-orders/{salesOrderId}:
    get:
      tags: [SalesOrders]
      summary: Retrieve a specific sales order
      parameters:
        - in: path
          name: salesOrderId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesOrder'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [SalesOrders]
      summary: Update a sales order
      parameters:
        - in: path
          name: salesOrderId
          required: true
          schema: {type: integer, format: int64}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesOrder'
        '400':
          description: Invalid input or invalid state transitions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: State conflict (e.g., cancelling a delivered order)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                soStateConflict:
                  summary: "Cannot cancel; order delivered"
                  value:
                    status: 409
                    error: "Conflict"
                    code: "SO_STATE_CONFLICT"
                    message: "Invalid transition for a delivered order"
                    path: "/api/v1/sales-orders/{salesOrderId}"
                    timestamp: "2025-08-28T10:40:00Z"
                    details:
                      salesOrderId: 6005
                      deliveredAt: "2025-08-28T08:00:00Z"
    delete:
      tags: [SalesOrders]
      summary: Delete a sales order
      parameters:
        - in: path
          name: salesOrderId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '204': {description: Deleted}
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: State conflict (blocked by service rules)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                soDeleteConflict:
                  summary: "Cannot delete; order delivered"
                  value:
                    status: 409
                    error: "Conflict"
                    code: "SO_STATE_CONFLICT"
                    message: "Cannot delete a delivered order"
                    path: "/api/v1/sales-orders/{salesOrderId}"
                    timestamp: "2025-08-28T10:41:00Z"
                    details:
                      salesOrderId: 6005
                      deliveredAt: "2025-08-28T08:00:00Z"

  /api/v1/sales-orders/{salesOrderId}/items:
    get:
      tags: [SalesOrderItems]
      summary: List items for a sales order (paged)
      parameters:
        - in: path
          name: salesOrderId
          required: true
          schema: {type: integer, format: int64}
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        '200':
          description: Paged items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageSalesOrderItem'
        '404':
          description: Sales order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags: [SalesOrderItems]
      summary: Add an item to a sales order
      parameters:
        - in: path
          name: salesOrderId
          required: true
          schema: {type: integer, format: int64}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderItemCreate'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URL of the created item
              schema:
                type: string
                format: uri
                example: "/api/v1/sales-orders/123/items/456"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesOrderItem'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Sales order or product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Duplicate item (same product per sales order)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/sales-orders/{salesOrderId}/items/{salesOrderItemId}:
    get:
      tags: [SalesOrderItems]
      summary: Retrieve a sales order item
      parameters:
        - in: path
          name: salesOrderId
          required: true
          schema: {type: integer, format: int64}
        - in: path
          name: salesOrderItemId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesOrderItem'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [SalesOrderItems]
      summary: Update a sales order item
      parameters:
        - in: path
          name: salesOrderId
          required: true
          schema: {type: integer, format: int64}
        - in: path
          name: salesOrderItemId
          required: true
          schema: {type: integer, format: int64}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderItemUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesOrderItem'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: State conflict (cannot mutate items on a delivered order)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [SalesOrderItems]
      summary: Delete a sales order item
      parameters:
        - in: path
          name: salesOrderId
          required: true
          schema: {type: integer, format: int64}
        - in: path
          name: salesOrderItemId
          required: true
          schema: {type: integer, format: int64}
      responses:
        '204': {description: Deleted}
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: State conflict (cannot delete items on a delivered order)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /api/v1/customers/{customerId}:
    get:
      tags: [Customers]
      summary: Retrieve detailed information for a specific customer
      description: Returns 404 if the customer is soft-deleted.
      parameters: 
        - in: path
          name: customerId
          required: true
          schema: 
            type: integer
            format: int64
      responses:
        '200': 
          description: OK
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Customer'
        '404': 
          description: Not found
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
    
    put:
      tags: [Customers]
      summary: Update customer with all required fields
      parameters: 
        - in: path
          name: customerId
          required: true
          schema: 
            type: integer
            format: int64
      requestBody:
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/CustomerUpdate'
      responses:
        '200': 
          description: Updated
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Customer'
        '400': 
          description: Invalid input
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '404': 
          description: Not found
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
        '409': 
          description: Duplicate email
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                duplicateCustomerEmailOnUpdate:
                  summary: "Email collides with another customer"
                  value:
                    status: 409
                    error: "Conflict"
                    code: "DUPLICATE_EMAIL"
                    message: "Email is already used by another active customer"
                    path: "/api/v1/customers/{customerId}"
                    timestamp: "2025-08-28T10:48:00Z"
                    details:
                      email: "orders@bluemart.com"
    
    delete:
      tags: [Customers]
      summary: Delete a customer (soft delete by default; hard delete if never used)
      description: >-
        Performs a soft delete by setting deletedAt. If the customer has never been referenced
        (no sales orders), the service may hard-delete it. Subsequent reads exclude soft-deleted
        customers unless include_deleted=true is provided on list endpoints.
      parameters: 
        - in: path
          name: customerId
          required: true
          schema: 
            type: integer
            format: int64
      responses:
        '204': 
          description: Deleted
        '404': 
          description: Not found
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ErrorResponse'
