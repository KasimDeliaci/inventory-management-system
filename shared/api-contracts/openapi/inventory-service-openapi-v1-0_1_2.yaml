openapi: 3.0.0
info:
  title: Inventory Service API
  version: 0.4.0
  description: >-
    CRUD for master data (Products, Suppliers, Customers) aligned with your stricter V1/V2
    migrations. Integer IDs, no auth. Timestamps are read-only and maintained in app code
    (e.g., JPA auditing). Product creation/update requires full domain fields.
servers:
  - url: http://localhost:8000
    description: Local dev
  - url: http://inventory-service:8000
    description: In-cluster name

components:
  parameters:
    PageParam: { in: query, name: page, description: "0-based page number", schema: { type: integer, minimum: 0, default: 0 } }
    SizeParam: { in: query, name: size, description: "Page size", schema: { type: integer, minimum: 1, maximum: 200, default: 20 } }
    SortParam: { in: query, name: sort, description: "Optional sort clause (field,[asc|desc])", schema: { type: string, example: "productName,asc" } }

  schemas:
    # -----------------------------
    # ENUMS (from V1__types.sql)
    # -----------------------------
    CustomerSegment: { type: string, description: "Business segment classification for customer categorization and pricing strategies", enum: [INDIVIDUAL, SME, CORPORATE, ENTERPRISE, OTHER], example: SME }

    # -----------------------------
    # Shared pagination & errors
    # -----------------------------
    PageMeta:
      type: object
      properties:
        page: { type: integer }
        size: { type: integer }
        totalElements: { type: integer }
        totalPages: { type: integer }
    ErrorResponse:
      type: object
      properties:
        status: { type: integer, example: 400 }
        error: { type: string, example: "Bad Request" }
        message: { type: string, example: "Validation failed: unitOfMeasure must not be blank." }
        path: { type: string, example: "/api/v1/products" }
        timestamp: { type: string, format: date-time }

    # -----------------------------
    # Product
    # -----------------------------
    Product:
      type: object
      required: [productId, productName, category, unitOfMeasure, safetyStock, reorderPoint, currentPrice]
      properties:
        productId: { type: integer, format: int64, example: 101, description: "Unique identifier for the product" }
        productName: { type: string, maxLength: 200, example: "iPhone 15 Pro", description: "Name of the product (max 200 characters)" }
        description: { type: string, nullable: true, example: "Latest model with advanced camera system", description: "Optional detailed description of the product" }
        category: { type: string, maxLength: 100, example: "Electronics", description: "Product category for organization and filtering (max 100 characters)" }
        unitOfMeasure: { type: string, maxLength: 20, minLength: 1, example: "adet", description: "Unit of measurement. Allowed: adet, ton, kg, g, lt, ml, koli, paket, çuval, şişe" }
        safetyStock: { type: number, format: double, minimum: 0, example: 10, description: "Minimum stock level that triggers reordering alerts" }
        reorderPoint: { type: number, format: double, minimum: 0, example: 25, description: "Stock level threshold for automatic reordering" }
        currentPrice: { type: number, format: double, minimum: 0, example: 1299.99, description: "Current selling price of the product" }
        createdAt: { type: string, format: date-time, readOnly: true, description: "Timestamp when the product was created" }
        updatedAt: { type: string, format: date-time, readOnly: true, description: "Timestamp when the product was last updated" }
    ProductCreate:
      type: object
      required: [productName, category, unitOfMeasure, safetyStock, reorderPoint, currentPrice]
      properties:
        productName: { type: string, minLength: 1, maxLength: 200, description: "Name of the product (1-200 characters)" }
        description: { type: string, nullable: true, description: "Optional detailed description of the product" }
        category: { type: string, minLength: 1, maxLength: 100, description: "Product category for organization (1-100 characters)" }
        unitOfMeasure: { type: string, minLength: 1, maxLength: 20, example: "adet", description: "Unit of measurement. Allowed: adet, ton, kg, g, lt, ml, koli, paket, çuval, şişe" }
        safetyStock: { type: number, format: double, minimum: 0, description: "Minimum stock level that triggers reordering alerts" }
        reorderPoint: { type: number, format: double, minimum: 0, description: "Stock level threshold for automatic reordering" }
        currentPrice: { type: number, format: double, minimum: 0, description: "Current selling price of the product" }
    ProductUpdate:
      allOf:
        - $ref: '#/components/schemas/ProductCreate'

    PageProduct:
      type: object
      properties:
        content:
          type: array
          items: { $ref: '#/components/schemas/Product' }
        page: { $ref: '#/components/schemas/PageMeta' }

    # -----------------------------
    # Supplier
    # -----------------------------
    Supplier:
      type: object
      required: [supplierId, supplierName, email, phone, city]
      properties:
        supplierId: { type: integer, format: int64, example: 11, description: "Unique identifier for the supplier" }
        supplierName: { type: string, maxLength: 200, example: "Acme Foods Ltd", description: "Name of the supplier company (max 200 characters)" }
        email: { type: string, format: email, maxLength: 100, example: "contact@acmefoods.com", description: "Unique email address for the supplier (max 100 characters)" }
        phone: { type: string, maxLength: 30, pattern: "^[+]?[0-9\\s\\-\\(\\)]+$", example: "+90 212 555 0123", description: "Contact phone number (max 30 characters)" }
        city: { type: string, maxLength: 50, example: "Istanbul", description: "City where the supplier is located (max 50 characters)" }
        createdAt: { type: string, format: date-time, readOnly: true, description: "Timestamp when the supplier was created" }
        updatedAt: { type: string, format: date-time, readOnly: true, description: "Timestamp when the supplier was last updated" }
    SupplierCreate:
      type: object
      required: [supplierName, email, phone, city]
      properties:
        supplierName: { type: string, minLength: 1, maxLength: 200, description: "Name of the supplier company (1-200 characters)" }
        email: { type: string, format: email, maxLength: 100, description: "Unique email address for the supplier (max 100 characters)" }
        phone: { type: string, maxLength: 30, pattern: "^[+]?[0-9\\s\\-\\(\\)]+$", description: "Contact phone number (max 30 characters)" }
        city: { type: string, minLength: 1, maxLength: 50, description: "City where the supplier is located (1-50 characters)" }
    SupplierUpdate:
      allOf:
        - $ref: '#/components/schemas/SupplierCreate'

    PageSupplier:
      type: object
      properties:
        content:
          type: array
          items: { $ref: '#/components/schemas/Supplier' }
        page: { $ref: '#/components/schemas/PageMeta' }

    # -----------------------------
    # Customer
    # -----------------------------
    Customer:
      type: object
      required: [customerId, customerName, customerSegment, email, phone, city]
      properties:
        customerId: { type: integer, format: int64, example: 501, description: "Unique identifier for the customer" }
        customerName: { type: string, maxLength: 200, example: "Blue Mart Electronics", description: "Name of the customer or company (max 200 characters)" }
        customerSegment: { $ref: '#/components/schemas/CustomerSegment', description: "Business segment classification of the customer" }
        email: { type: string, format: email, maxLength: 100, example: "orders@bluemart.com", description: "Unique email address for the customer (max 100 characters)" }
        phone: { type: string, maxLength: 30, pattern: "^[+]?[0-9\\s\\-\\(\\)]+$", example: "+90 532 123 4567", description: "Contact phone number (max 30 characters)" }
        city: { type: string, maxLength: 50, example: "Ankara", description: "City where the customer is located (max 50 characters)" }
        createdAt: { type: string, format: date-time, readOnly: true, description: "Timestamp when the customer was created" }
        updatedAt: { type: string, format: date-time, readOnly: true, description: "Timestamp when the customer was last updated" }
    CustomerCreate:
      type: object
      required: [customerName, customerSegment, email, phone, city]
      properties:
        customerName: { type: string, minLength: 1, maxLength: 200, description: "Name of the customer or company (1-200 characters)" }
        customerSegment: { $ref: '#/components/schemas/CustomerSegment', description: "Business segment classification of the customer" }
        email: { type: string, format: email, maxLength: 100, description: "Unique email address for the customer (max 100 characters)" }
        phone: { type: string, maxLength: 30, pattern: "^[+]?[0-9\\s\\-\\(\\)]+$", description: "Contact phone number (max 30 characters)" }
        city: { type: string, minLength: 1, maxLength: 50, description: "City where the customer is located (1-50 characters)" }
    CustomerUpdate:
      allOf:
        - $ref: '#/components/schemas/CustomerCreate'

    PageCustomer:
      type: object
      properties:
        content:
          type: array
          items: { $ref: '#/components/schemas/Customer' }
        page: { $ref: '#/components/schemas/PageMeta' }

paths:
  # -----------------
  # Products
  # -----------------
  /api/v1/products:
    get:
      tags: [Products]
      summary: Retrieve paginated list of products with optional sorting
      parameters: [ { $ref: '#/components/parameters/PageParam' }, { $ref: '#/components/parameters/SizeParam' }, { $ref: '#/components/parameters/SortParam' } ]
      responses:
        '200':
          description: Paged products
          content: { application/json: { schema: { $ref: '#/components/schemas/PageProduct' } } }
    post:
      tags: [Products]
      summary: Create a new product with required fields
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/ProductCreate' } } }
      responses:
        '201':
          description: Created
          headers:
            Location: { description: "URL of the created product", schema: { type: string, format: uri, example: "/api/v1/products/123" } }
          content:
            application/json: { schema: { $ref: '#/components/schemas/Product' } }
        '400': { description: Invalid input, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
  /api/v1/products/{id}:
    get:
      tags: [Products]
      summary: Retrieve detailed information for a specific product
      parameters: [ { in: path, name: id, required: true, schema: { type: integer, format: int64 } } ]
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Product' } } } }
        '404': { description: Not found, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
    put:
      tags: [Products]
      summary: Update product with all required fields
      parameters: [ { in: path, name: id, required: true, schema: { type: integer, format: int64 } } ]
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/ProductUpdate' } } }
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/Product' } } } }
        '400': { description: Invalid input, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: Not found, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
    delete:
      tags: [Products]
      summary: Permanently remove a product from the inventory system
      parameters: [ { in: path, name: id, required: true, schema: { type: integer, format: int64 } } ]
      responses:
        '204': { description: Deleted }
        '404': { description: Not found, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  # -----------------
  # Suppliers
  # -----------------
  /api/v1/suppliers:
    get:
      tags: [Suppliers]
      summary: Retrieve paginated list of suppliers with optional sorting
      parameters: [ { $ref: '#/components/parameters/PageParam' }, { $ref: '#/components/parameters/SizeParam' }, { $ref: '#/components/parameters/SortParam' } ]
      responses:
        '200':
          description: Paged suppliers
          content: { application/json: { schema: { $ref: '#/components/schemas/PageSupplier' } } }
    post:
      tags: [Suppliers]
      summary: Register a new supplier with required fields
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/SupplierCreate' } } }
      responses:
        '201':
          description: Created
          headers:
            Location: { description: "URL of the created supplier", schema: { type: string, format: uri, example: "/api/v1/suppliers/456" } }
          content:
            application/json: { schema: { $ref: '#/components/schemas/Supplier' } }
        '400': { description: Invalid input, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '409': { description: Duplicate email, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
  /api/v1/suppliers/{id}:
    get:
      tags: [Suppliers]
      summary: Retrieve detailed information for a specific supplier
      parameters: [ { in: path, name: id, required: true, schema: { type: integer, format: int64 } } ]
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Supplier' } } } }
        '404': { description: Not found, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
    put:
      tags: [Suppliers]
      summary: Update supplier with all required fields
      parameters: [ { in: path, name: id, required: true, schema: { type: integer, format: int64 } } ]
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/SupplierUpdate' } } }
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/Supplier' } } } }
        '400': { description: Invalid input, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: Not found, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '409': { description: Duplicate email, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
    delete:
      tags: [Suppliers]
      summary: Permanently remove a supplier from the system
      parameters: [ { in: path, name: id, required: true, schema: { type: integer, format: int64 } } ]
      responses:
        '204': { description: Deleted }
        '404': { description: Not found, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }

  # -----------------
  # Customers
  # -----------------
  /api/v1/customers:
    get:
      tags: [Customers]
      summary: Retrieve paginated list of customers with optional sorting
      parameters: [ { $ref: '#/components/parameters/PageParam' }, { $ref: '#/components/parameters/SizeParam' }, { $ref: '#/components/parameters/SortParam' } ]
      responses:
        '200':
          description: Paged customers
          content: { application/json: { schema: { $ref: '#/components/schemas/PageCustomer' } } }
    post:
      tags: [Customers]
      summary: Register a new customer with required fields
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/CustomerCreate' } } }
      responses:
        '201':
          description: Created
          headers:
            Location: { description: "URL of the created customer", schema: { type: string, format: uri, example: "/api/v1/customers/789" } }
          content:
            application/json: { schema: { $ref: '#/components/schemas/Customer' } }
        '400': { description: Invalid input, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '409': { description: Duplicate email, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
  /api/v1/customers/{id}:
    get:
      tags: [Customers]
      summary: Retrieve detailed information for a specific customer
      parameters: [ { in: path, name: id, required: true, schema: { type: integer, format: int64 } } ]
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Customer' } } } }
        '404': { description: Not found, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
    put:
      tags: [Customers]
      summary: Update customer with all required fields
      parameters: [ { in: path, name: id, required: true, schema: { type: integer, format: int64 } } ]
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/CustomerUpdate' } } }
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/Customer' } } } }
        '400': { description: Invalid input, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: Not found, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '409': { description: Duplicate email, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
    delete:
      tags: [Customers]
      summary: Permanently remove a customer from the system
      parameters: [ { in: path, name: id, required: true, schema: { type: integer, format: int64 } } ]
      responses:
        '204': { description: Deleted }
        '404': { description: Not found, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
