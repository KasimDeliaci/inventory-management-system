# -*- coding: utf-8 -*-
"""Forecast_Trial_01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uyIuEcnQ2YgQyDVhbbRhqihlO_2UUlVu
"""

import pandas as pd
import numpy as np
import random
from datetime import datetime, timedelta
import holidays
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from xgboost import XGBRegressor
import matplotlib.pyplot as plt

from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from keras.layers import Dense, Dropout

df = pd.read_csv("train.csv", parse_dates=["date"])
df = df.sort_values(["date"])
df.head()

df = df.drop(columns = ["productName", "category", "uom","month"])
df = df.rename(columns ={"dow_iso": "dayofweek", "units_sold": "y", "product_discount_pct_max":"dicount_ratio"})
df.head()

df = df.drop(columns = ["holiday_name","unit_price_avg"])

"""#LSTM"""

features = ["dayofweek","is_weekend","week_of_year","is_holiday","is_summer","is_winter","is_back_to_school","is_ramadan","is_mid_term_break","product_discount_any"]
target = "y"

#Scaling
scaler_X = MinMaxScaler()
scaler_y = MinMaxScaler()

X_scaled = scaler_X.fit_transform(df[features])
y_scaled = scaler_y.fit_transform(df[[target]])

def create_sequences(X, y, seq_length=14, horizon=7):
    X_seq, y_seq = [], []
    for i in range(len(X) - seq_length - horizon + 1):
        X_seq.append(X[i:i+seq_length])
        y_seq.append(y[i+seq_length:i+seq_length+horizon])
    return np.array(X_seq), np.array(y_seq)

SEQ_LENGTH = 14  # look-back 14 days
HORIZON = 7      # predict next 7 days

X_seq, y_seq = create_sequences(X_scaled, y_scaled, SEQ_LENGTH, HORIZON)

# TRAIN/TEST SPLIT
split = int(len(X_seq) * 0.8)
X_train, X_test = X_seq[:split], X_seq[split:]
y_train, y_test = y_seq[:split], y_seq[split:]

model = Sequential()
model.add(LSTM(64, activation='relu', input_shape=(SEQ_LENGTH, X_train.shape[2])))
model.add(Dropout(0.1))
model.add(Dense(HORIZON))
model.compile(optimizer='adam', loss='mse')

# TRAIN MODEL
history = model.fit(X_train, y_train, epochs=50, batch_size=16,
                    validation_split=0.1, verbose=1)

#prediction
y_pred_scaled = model.predict(X_test)
y_pred = scaler_y.inverse_transform(y_pred_scaled.reshape(-1, HORIZON))

y_test_actual = scaler_y.inverse_transform(y_test.reshape(-1, HORIZON))

# Compute RMSE per horizon step
for i in range(HORIZON):
    rmse = np.sqrt(mean_squared_error(y_test_actual[:, i], y_pred[:, i]))
    print(f"RMSE t+{i+1}: {rmse:.2f}")

plt.figure(figsize=(14,6))
plt.plot(y_test_actual, label='Actual t+1')
plt.plot(y_pred, label='Predicted t+1')
plt.xlabel('Samples')
plt.ylabel('Demand')
plt.title('LSTM Forecast - Day 1 of 7-step horizon')
plt.legend()
plt.show()

"""#SARIMAX"""

from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error

target1 =df["y"]
exog_features1 = ["dayofweek","is_weekend","week_of_year","is_holiday","is_summer","is_winter","is_back_to_school",
                  "is_ramadan","is_mid_term_break","product_discount_any"]
exog1 = df[exog_features1]

# Split train/test (last 30 days as test)
train_target = target1[:-30]
test_target = target1[-30:]
train_exog = exog1[:-30]
test_exog = exog1[-30:]

model = SARIMAX(
    train_target,
    exog=train_exog,
    order=(1,1,1),
    seasonal_order=(1,1,1,7),
    enforce_stationarity=False,
    enforce_invertibility=False
)

model_fit = model.fit(disp=False)
print(model_fit.summary())

#Forecast
forecast = model_fit.get_forecast(steps=30, exog=test_exog)
forecast_mean = forecast.predicted_mean
forecast_ci = forecast.conf_int()

rmse = np.sqrt(mean_squared_error(test_target, forecast_mean))
print(f"Test RMSE: {rmse:.2f}")

results = pd.DataFrame({
    "actual": test_target,
    "forecast": forecast_mean
})
print(results.tail(15))

plt.figure(figsize=(12,5))
plt.plot(train_target.index, train_target, label="Train")
plt.plot(test_target.index, test_target, label="Actual")
plt.plot(test_target.index, forecast_mean, label="Forecast")
plt.fill_between(test_target.index, forecast_ci.iloc[:,0], forecast_ci.iloc[:,1], color='pink', alpha=0.3)
plt.legend()
plt.show()

from statsmodels.tsa.seasonal import seasonal_decompose
# Perform seasonal decomposition of the daily demand data using an additive model
decomposition = seasonal_decompose(df['y'],
                                   model = 'add',
                                   period = 7)

# Plot the decomposed components (trend, seasonal, and residual)
fig = decomposition.plot()
fig.set_size_inches(10,8)
plt.show()

