# -*- coding: utf-8 -*-
"""Forecast_Trial_03.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BYhLEyWC4O4bSIRVhujuJMHXMt6uuRx0
"""

import pandas as pd
import numpy as np
import random
from datetime import datetime, timedelta
from xgboost import XGBRegressor
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from keras.layers import Dense, Dropout
from statsmodels.tsa.statespace.sarimax import SARIMAX

"""#XGBoost Model"""

df02 = pd.read_csv("C:/Users/kupa-/Downloads/daily_calendar.csv",parse_dates = ["date"])
df01= pd.read_csv("C:/Users/kupa-/Downloads/product_1005.csv",parse_dates = ["date"])
df01.head()

df = df01.merge(df02, on="date")
df.tail()

df = df.fillna(0)

df["is_weekend"] = df["is_weekend"].astype(int)
df["is_ramadan"] = df["is_ramadan"].astype(int)
df["is_official_holiday"] = df["is_official_holiday"].astype(int)
df["is_valentines"] = df["is_valentines"].astype(int)
df["is_mothers_day"] = df["is_mothers_day"].astype(int)
df["is_teachers_day"] = df["is_teachers_day"].astype(int)
df["is_ataturk_memorial"] = df["is_ataturk_memorial"].astype(int)
df["is_black_friday"] = df["is_black_friday"].astype(int)
df["is_back_to_school"] = df["is_back_to_school"].astype(int)
df["is_eid_fitr"] = df["is_eid_fitr"].astype(int)
df["is_eid_adha"] = df["is_eid_adha"].astype(int)
df.head()

df["is_weekend"] = df["is_weekend"].rename({"winter":1,"spring":2,"summer":3,"fall":4})

df.info()

df.drop(columns=["year","month","day"],inplace=True)

df.drop(columns=["season","holiday_names"], inplace = True, axis=1)

df["lag_1"] = df["demand"].shift(1)
df["lag_7"] = df["demand"].shift(7)
df["rolling_mean_7"] = df["demand"].shift(1).rolling(7).mean()

df.dropna()

horizon = 7
targets = []
for i in range(1, horizon + 1):
    df[f"target_t+{i}"] = df["demand"].shift(-i)
    targets.append(f"target_t+{i}")

df = df.dropna()

x = df.drop(columns=["demand", "date"] + targets)
y = df[targets]

train_mask = df["date"] < (df["date"].max() - pd.Timedelta(days=30))
x_train, x_test = x[train_mask], x[~train_mask]
y_train, y_test = y[train_mask], y[~train_mask]

df.info()

model = XGBRegressor(
    n_estimators=500,
    learning_rate=0.03,
    max_depth=6,
    subsample=0.8,
    colsample_bytree=0.8,
    random_state=42
)

models = {}
for i, target in enumerate(targets, start=1):
    m = model.fit(x_train, y_train[target])
    models[target] = m

preds = {}
for target, m in models.items():
    preds[target] = m.predict(x_test)

preds = pd.DataFrame(preds, index=x_test.index)

# Calculate RMSE per horizon step
for target in targets:
    rmse = np.sqrt(mean_squared_error(y_test[target], preds[target]))
    print(f"RMSE for {target}: {rmse:.2f}")

results = pd.concat([df.loc[x_test.index, ["date", "productId"]], y_test, preds], axis=1)
print(results.head(14))

#7 days forecast
horizon = preds.columns  # ['target_t+1', ..., 'target_t+7']

for i, col in enumerate(horizon, start=1):
    plt.figure(figsize=(12, 6))
    plt.plot(y_test.index, y_test[col], label=f'Actual {col}', linestyle='--')
    plt.plot(preds.index, preds[col], label=f'Predicted {col}', alpha=0.7)

    plt.xlabel('Date Index')
    plt.ylabel('Demand')
    plt.title(f'XGBoost Forecast ({col})')
    plt.legend()
    plt.show()

"""#SARIMAX Model"""

df02 = pd.read_csv("C:/Users/kupa-/Downloads/daily_calendar.csv",parse_dates = ["date"])
df01= pd.read_csv("C:/Users/kupa-/Downloads/product_1005.csv",parse_dates = ["date"])

df = df01.merge(df02, on="date")

df.fillna(0)

df02 = pd.read_csv("C:/Users/kupa-/Downloads/daily_calendar.csv",parse_dates = ["date"])
df01= pd.read_csv("C:/Users/kupa-/Downloads/product_1005.csv",parse_dates = ["date"])

df = df01.merge(df02, on="date")

df.fillna(0)

df.drop(columns=["year","month","day","season","holiday_names"], inplace = True, axis=1)

target = df["demand"]
exog_features = ["promoPct", "dow", "is_weekend", "is_official_holiday",
                 "is_ramadan","is_eid_fitr","is_eid_adha","is_valentines",
                "is_mothers_day","is_teachers_day","is_ataturk_memorial",
                "is_black_friday","is_back_to_school"]
exog = df[exog_features]

# Split train/test (last 30 days as test)
train_target = target[:-30]
test_target = target[-30:]
train_exog = exog[:-30]
test_exog = exog[-30:]

model = SARIMAX(
    train_target,
    exog=train_exog,
    order=(1,1,1),
    seasonal_order=(1,1,1,7),
    enforce_stationarity=False,
    enforce_invertibility=False
)

model_fit = model.fit(disp=False)
print(model_fit.summary())

#Forecast
forecast = model_fit.get_forecast(steps=30, exog=test_exog)
forecast_mean = forecast.predicted_mean
forecast_ci = forecast.conf_int()

for target in targets:
    rmse = np.sqrt(mean_squared_error(test_target, forecast_mean))
    print(f"Test RMSE: {rmse:.2f}")

results = pd.DataFrame({
    "actual": test_target,
    "forecast": forecast_mean
})
print(results.head(15))

plt.figure(figsize=(12,5))
plt.plot(test_target.index, test_target, label="Actual")
plt.plot(test_target.index, forecast_mean, label="Forecast")
plt.fill_between(test_target.index, forecast_ci.iloc[:,0], forecast_ci.iloc[:,1], color='pink', alpha=0.3)
plt.legend()
plt.show()

"""#LSTM Model"""

df02 = pd.read_csv("C:/Users/kupa-/Downloads/daily_calendar.csv",parse_dates = ["date"])
df01= pd.read_csv("C:/Users/kupa-/Downloads/product_1005.csv",parse_dates = ["date"])

df = df01.merge(df02, on="date")

df.fillna(0)

df02 = pd.read_csv("C:/Users/kupa-/Downloads/daily_calendar.csv",parse_dates = ["date"])
df01= pd.read_csv("C:/Users/kupa-/Downloads/product_1005.csv",parse_dates = ["date"])

df = df01.merge(df02, on="date")

df.fillna(0)

df.drop(columns=["year","month","day","season","holiday_names"], inplace = True, axis=1)

target = "demand"
features = ["promoPct", "dow", "is_weekend","is_official_holiday",
                 "is_ramadan","is_eid_fitr","is_eid_adha","is_valentines",
                "is_mothers_day","is_teachers_day","is_ataturk_memorial",
                "is_black_friday","is_back_to_school"]

#Scaling
scaler_X = MinMaxScaler()
scaler_y = MinMaxScaler()

X_scaled = scaler_X.fit_transform(df[features])
y_scaled = scaler_y.fit_transform(df[[target]])

def create_sequences(X, y, seq_length=14, horizon=7):
    X_seq, y_seq = [], []
    for i in range(len(X) - seq_length - horizon + 1):
        X_seq.append(X[i:i+seq_length])
        y_seq.append(y[i+seq_length:i+seq_length+horizon])
    return np.array(X_seq), np.array(y_seq)

SEQ_LENGTH = 14  # look-back 14 days
HORIZON = 7      # predict next 7 days

X_seq, y_seq = create_sequences(X_scaled, y_scaled, SEQ_LENGTH, HORIZON)

# TRAIN/TEST SPLIT
split = int(len(X_seq) * 0.8)
X_train, X_test = X_seq[:split], X_seq[split:]
y_train, y_test = y_seq[:split], y_seq[split:]

model = Sequential()
model.add(LSTM(64, activation='relu', input_shape=(SEQ_LENGTH, X_train.shape[2])))
model.add(Dense(HORIZON))
model.compile(optimizer='adam', loss='mse')

# TRAIN MODEL
history = model.fit(X_train, y_train, epochs=50, batch_size=16,
                    validation_split=0.2, verbose=1)

#prediction
y_pred_scaled = model.predict(X_test)
y_pred = scaler_y.inverse_transform(y_pred_scaled.reshape(-1, HORIZON))

y_test_actual = scaler_y.inverse_transform(y_test.reshape(-1, HORIZON))

# Compute RMSE per horizon step
for i in range(HORIZON):
    rmse = np.sqrt(mean_squared_error(y_test_actual[:, i], y_pred[:, i]))
    df_compare = pd.DataFrame({
        "Actual": y_test_actual[:, i],
        "Predicted": y_pred[:, i]
    })
    print(f"\nHorizon t+{i+1} | RMSE: {rmse:.2f}")
    print(df_compare.head(10))

plt.figure(figsize=(14,6))
plt.plot(y_test_actual[:,0], label='Actual t+1')
plt.plot(y_pred[:,0], label='Predicted t+1')
plt.xlabel('Samples')
plt.ylabel('Demand')
plt.title('LSTM Forecast - Day 1 of 7-step horizon')
plt.legend()
plt.show()