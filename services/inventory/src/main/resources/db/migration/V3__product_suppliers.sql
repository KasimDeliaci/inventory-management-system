-- PostgreSQL 17.6
-- V3__product_suppliers.sql
-- Purpose:
--   1) Productâ†”Supplier relationship (preferred flag + optional KPIs)

-- ======================================================================
-- PRODUCT_SUPPLIERS
-- ======================================================================
-- Purpose: Many-to-many relationship between products and suppliers
-- Features: Preferred supplier selection, operational settings, performance KPIs
-- Notes: 
--   - Replaces any existing product_suppliers table with stricter constraints
--   - Financial data (pricing) intentionally excluded for this version
--   - KPIs are computed and maintained by application code, not DB triggers
--   - Uses DROP/CREATE instead of ALTER for clean schema in development environment

DROP TABLE IF EXISTS product_suppliers CASCADE;
CREATE TABLE product_suppliers (
  -- Primary key: Auto-incrementing identifier
  product_supplier_id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

  -- Foreign keys: Establish many-to-many relationship
  -- CASCADE DELETE: When product/supplier is deleted, remove all relationships
  product_id            BIGINT NOT NULL
                           REFERENCES products(product_id)  ON DELETE CASCADE,
  supplier_id           BIGINT NOT NULL
                           REFERENCES suppliers(supplier_id) ON DELETE CASCADE,

  -- Operational settings for procurement
  min_order_quantity    NUMERIC(12,3) NOT NULL DEFAULT 1
                           CHECK (min_order_quantity > 0),  -- Must order at least some quantity
  is_preferred          BOOLEAN NOT NULL DEFAULT FALSE,    -- Preferred supplier for this product
  active                BOOLEAN NOT NULL DEFAULT TRUE,     -- Can we currently order from this supplier?

  -- Performance KPIs (nullable until we have historical data)
  -- These will be computed by the application based on purchase order history
  avg_lead_time_days    NUMERIC(6,2)
                           CHECK (avg_lead_time_days IS NULL OR avg_lead_time_days >= 0),
  avg_delay_days        NUMERIC(6,2)
                           CHECK (avg_delay_days     IS NULL OR avg_delay_days     >= 0),

  -- Reliability counters (denormalized for performance)
  -- Maintained by application code during purchase order lifecycle events
  total_orders_count    INTEGER NOT NULL DEFAULT 0,
  delayed_orders_count  INTEGER NOT NULL DEFAULT 0,
  
  -- Constraint checks for reliability counters
  CONSTRAINT chk_total_orders_nonneg CHECK (total_orders_count >= 0),
  CONSTRAINT chk_delayed_orders_nonneg CHECK (delayed_orders_count >= 0),
  CONSTRAINT chk_orders_counts_consistent CHECK (delayed_orders_count <= total_orders_count),  -- Delayed can't exceed total

  -- Activity tracking for dashboard reporting
  last_delivery_date    DATE,  -- Most recent successful delivery from this supplier

  -- Standard audit fields
  created_at            timestamptz NOT NULL DEFAULT now(),
  updated_at            timestamptz NOT NULL DEFAULT now(),

  -- Business rule: Each product-supplier pair can only exist once
  CONSTRAINT uq_product_supplier UNIQUE (product_id, supplier_id)
);

-- ======================================================================
-- INDEXES FOR PERFORMANCE OPTIMIZATION
-- ======================================================================

-- Index 1: Fast lookups by supplier  
-- Use case: "Show me all products supplied by supplier Y" (supplier performance reports)
-- Query pattern: SELECT * FROM product_suppliers WHERE supplier_id = ?
CREATE INDEX idx_prod_sup_supplier_id ON product_suppliers (supplier_id);

-- ======================================================================
-- COMPOSITE INDEXES FOR COMMON QUERY PATTERNS
-- ======================================================================

-- Index 2: Active suppliers for a product (very common query pattern)
-- Use case: "Show me all active suppliers for product X" (supplier selection dropdown)
-- Query pattern: SELECT * FROM product_suppliers WHERE product_id = ? AND active = TRUE
CREATE INDEX idx_prod_sup_product_active ON product_suppliers (product_id, active);

-- Index 3: Find preferred supplier for a product
-- Use case: "Get the preferred supplier for product X" (procurement logic)
-- Query pattern: SELECT * FROM product_suppliers WHERE product_id = ? AND is_preferred = TRUE
CREATE INDEX idx_prod_sup_product_preferred ON product_suppliers (product_id, is_preferred);

-- Index 4: Recent delivery activity for reporting
-- Use case: "Show suppliers with recent deliveries" (performance dashboards)
-- Query pattern: SELECT * FROM product_suppliers WHERE last_delivery_date >= ?
CREATE INDEX idx_prod_sup_last_delivery ON product_suppliers (last_delivery_date) 
  WHERE last_delivery_date IS NOT NULL;

-- ======================================================================
-- BUSINESS RULE ENFORCEMENT INDEX
-- ======================================================================

-- Unique constraint: Enforce at most ONE preferred supplier per product
-- Business rule: A product can have multiple suppliers, but only one can be "preferred"
-- Use case: Prevents data integrity issues in procurement logic
-- Query optimization: Fast lookup of preferred supplier for a product
-- Technical note: Uses partial index (WHERE clause) for efficiency - only indexes preferred=TRUE rows
-- Clarification: Enforces uniqueness regardless of active status (aktif/pasif fark etmez)

DROP INDEX IF EXISTS uq_prod_one_preferred;
CREATE UNIQUE INDEX uq_prod_one_preferred
  ON product_suppliers (product_id)
  INCLUDE (supplier_id)  -- Include supplier_id for index-only scans (performance boost)
  WHERE is_preferred = TRUE;