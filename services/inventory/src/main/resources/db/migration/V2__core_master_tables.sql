-- PostgreSQL 17.6
-- V2__core_master_tables.sql
-- Assumes V1 created ENUM type: customer_segment
--   CREATE TYPE customer_segment AS ENUM ('INDIVIDUAL','SME','CORPORATE','ENTERPRISE','OTHER');

-- =========================
-- PRODUCTS
-- =========================
DROP TABLE IF EXISTS products CASCADE;
CREATE TABLE products (
  product_id        BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  product_name      VARCHAR(200) NOT NULL,
  description       TEXT,
  category          VARCHAR(100) NOT NULL,
  unit_of_measure   VARCHAR(20)  NOT NULL,
  safety_stock      NUMERIC(10,2) NOT NULL,
  reorder_point     NUMERIC(10,2) NOT NULL,
  current_price     NUMERIC(10,2) NOT NULL,
  created_at        timestamptz NOT NULL DEFAULT now(),
  updated_at        timestamptz NOT NULL DEFAULT now(),
  -- Business/quality checks
  CONSTRAINT chk_product_name_nonblank CHECK (btrim(product_name) <> ''),  -- No empty/whitespace names
  CONSTRAINT chk_category_nonblank     CHECK (btrim(category)     <> ''),  -- No empty categories
  CONSTRAINT chk_uom_allowed           CHECK (unit_of_measure IN ('adet','ton','kg','g','lt','ml','koli','paket','çuval','şişe')),  -- Allowed units only
  CONSTRAINT chk_safety_nonneg         CHECK (safety_stock  >= 0),
  CONSTRAINT chk_reorder_nonneg        CHECK (reorder_point >= 0),
  CONSTRAINT chk_reorder_vs_safety     CHECK (reorder_point >= safety_stock),  -- Business rule: reorder >= safety
  CONSTRAINT chk_price_nonneg          CHECK (current_price >= 0)
);

-- Performance indexes for common queries
CREATE INDEX idx_products_category    ON products (category);        -- Filter by category
CREATE INDEX idx_products_uom         ON products (unit_of_measure); -- Filter by unit type
CREATE INDEX idx_products_price       ON products (current_price);   -- Price sorting/filtering
CREATE INDEX idx_products_updated_at  ON products (updated_at);      -- Recent updates
CREATE INDEX idx_products_name        ON products (product_name);    -- Name search/sorting

-- =========================
-- SUPPLIERS
-- =========================
DROP TABLE IF EXISTS suppliers CASCADE;
CREATE TABLE suppliers (
  supplier_id       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  supplier_name     VARCHAR(200) NOT NULL,
  email             VARCHAR(100) NOT NULL UNIQUE,  -- Business emails must be unique
  phone             VARCHAR(30)  NOT NULL,
  city              VARCHAR(50)  NOT NULL,
  created_at        timestamptz NOT NULL DEFAULT now(),
  updated_at        timestamptz NOT NULL DEFAULT now(),
  -- Basic data quality checks
  CONSTRAINT chk_supplier_name_nonblank CHECK (btrim(supplier_name) <> ''),  -- No empty names
  CONSTRAINT chk_supplier_city_nonblank CHECK (btrim(city) <> '')            -- No empty cities
  -- Email/phone format validation handled in application layer
);
-- Performance indexes for common queries
CREATE INDEX idx_suppliers_city       ON suppliers (city);         -- Location-based filtering
CREATE INDEX idx_suppliers_updated_at ON suppliers (updated_at);   -- Recent updates
CREATE INDEX idx_suppliers_name       ON suppliers (supplier_name); -- Name search/sorting

-- =========================
-- CUSTOMERS
-- =========================
DROP TABLE IF EXISTS customers CASCADE;
CREATE TABLE customers (
  customer_id       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  customer_name     VARCHAR(200) NOT NULL,
  customer_segment  customer_segment NOT NULL,
  email             VARCHAR(100) NOT NULL UNIQUE,  -- Customer emails must be unique
  phone             VARCHAR(30)  NOT NULL,
  city              VARCHAR(50)  NOT NULL,
  created_at        timestamptz NOT NULL DEFAULT now(),
  updated_at        timestamptz NOT NULL DEFAULT now(),
  CONSTRAINT chk_customer_name_nonblank CHECK (btrim(customer_name) <> ''),  -- No empty names
  CONSTRAINT chk_customer_city_nonblank CHECK (btrim(city) <> '')            -- No empty cities
  -- Email/phone format validation handled in application layer
);
-- Performance indexes for common queries
CREATE INDEX idx_customers_segment     ON customers (customer_segment); -- Filter by business segment
CREATE INDEX idx_customers_city        ON customers (city);             -- Location-based filtering
CREATE INDEX idx_customers_updated_at  ON customers (updated_at);       -- Recent updates
CREATE INDEX idx_customers_name        ON customers (customer_name);    -- Name search/sorting