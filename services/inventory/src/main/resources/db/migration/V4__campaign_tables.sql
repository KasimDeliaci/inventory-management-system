-- ======================================================================
-- V4__campaign_tables.sql  (PostgreSQL 17.6)
-- Purpose: Product campaigns (+ product assignments) and customer special offers.
-- Notes:
--   • One campaign can target many products via campaign_products.
--   • “One active campaign per product” and “one active offer per customer”
--     are enforced in SERVICE for the PoC (DB exclusion indexes can come later).
-- ======================================================================

-- ----------------------------
-- 1) Campaigns (product promos)
-- ----------------------------
CREATE TABLE IF NOT EXISTS campaigns (
  campaign_id    BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  campaign_name  TEXT NOT NULL,
  campaign_type  TEXT NOT NULL
                  CHECK (campaign_type IN ('DISCOUNT','BXGY_SAME_PRODUCT')),

  -- Type parameters (nullable depending on type)
  discount_percentage        NUMERIC(5,2)
                  CHECK (discount_percentage IS NULL OR (discount_percentage >= 0 AND discount_percentage <= 100)),
  min_qty INTEGER CHECK (min_qty IS NULL OR min_qty > 0),
  buy_qty        INTEGER CHECK (buy_qty IS NULL OR buy_qty > 0),
  get_qty        INTEGER CHECK (get_qty IS NULL OR get_qty > 0),

  -- Window (inclusive)
  start_date     DATE NOT NULL,
  end_date       DATE NOT NULL,
  CONSTRAINT chk_campaign_dates CHECK (end_date >= start_date),

  -- Audit
  created_at     timestamptz NOT NULL DEFAULT now(),
  updated_at     timestamptz NOT NULL DEFAULT now(),

  -- Type/param shape sanity
  CONSTRAINT chk_params_for_percent_off CHECK (
    (campaign_type <> 'DISCOUNT')
    OR (discount_percentage IS NOT NULL AND buy_qty IS NULL AND get_qty IS NULL)
  ),
  CONSTRAINT chk_params_for_bxgy CHECK (
    (campaign_type <> 'BXGY_SAME_PRODUCT')
    OR (discount_percentage IS NULL AND buy_qty IS NOT NULL AND get_qty IS NOT NULL)
  )
);

CREATE INDEX IF NOT EXISTS idx_campaigns_window ON campaigns (start_date, end_date);
CREATE INDEX IF NOT EXISTS idx_campaigns_type   ON campaigns (campaign_type);

COMMENT ON TABLE campaigns IS
  'Product-scoped promos. Types: PERCENT_OFF (percent[, min_qty]), BXGY_SAME_PRODUCT (buy_qty, get_qty[, min_qty]). Dates inclusive.';

-- --------------------------------------------
-- 1b) Campaign → Products assignment (many-to-many)
-- --------------------------------------------
CREATE TABLE IF NOT EXISTS campaign_products (
  campaign_id  BIGINT NOT NULL REFERENCES campaigns(campaign_id) ON DELETE CASCADE,
  product_id   BIGINT NOT NULL REFERENCES products(product_id)   ON DELETE CASCADE,
  PRIMARY KEY (campaign_id, product_id)
);

CREATE INDEX IF NOT EXISTS idx_campaign_products_product ON campaign_products (product_id);

COMMENT ON TABLE campaign_products IS
  'Assign campaigns to products. Service ensures a product is not in overlapping active campaigns.';

-- ----------------------------------------------------------------------
-- 2) Customer special offers (customer-scoped % off)
-- ----------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS customer_special_offers (
  special_offer_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  customer_id      BIGINT NOT NULL REFERENCES customers(customer_id) ON DELETE CASCADE,

  percent_off      NUMERIC(5,2) NOT NULL CHECK (percent_off >= 0 AND percent_off <= 100),

  start_date       DATE NOT NULL,
  end_date         DATE NOT NULL,
  CONSTRAINT chk_cso_dates CHECK (end_date >= start_date),

  created_at       timestamptz NOT NULL DEFAULT now(),
  updated_at       timestamptz NOT NULL DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_cso_customer        ON customer_special_offers (customer_id);
CREATE INDEX IF NOT EXISTS idx_cso_customer_window ON customer_special_offers (customer_id, start_date, end_date);

COMMENT ON TABLE customer_special_offers IS
  'Customer-scoped percent-off across all products (dates inclusive). Service enforces one active per customer.';